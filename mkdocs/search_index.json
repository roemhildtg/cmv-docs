{
    "docs": [
        {
            "location": "/",
            "text": "CMV - The Configurable Map Viewer\n\n\nIntroduction\n\n\nCMV\n is a community-supported open source mapping framework. CMV works with the \nEsri JavaScript API\n, \nArcGIS Server\n, \nArcGIS Online\n and more.\n\n\nMake It Your Own!\n\n\nThis JavaScript web app can be easily configured or used as a boilerplate/starting point for basic viewers. It also demonstrates best practices for modular design and OOP via classes in JS using dojo's great \ndeclare\n system.\n\n\n\n\nDemo Site\n\n\nCheck out the demo site to get a taste for some of the capabilities you can use in your own applications.\n\n\nhttp://demo.cmv.io/viewer/\n\n\nGetting Started\n\n\n\n\nInstallation\n\n\nConfiguring\n\n\nSupport\n\n\nDevelopment Environment\n\n\n\n\nCore Widgets\n\n\nCMV comes with many \"core\" widgets including:\n\n\n\n\nBase Maps\n\n\nBookmarks\n\n\nDirections\n\n\nDraw\n\n\nEditor\n\n\nFind\n\n\nGeocoder\n\n\nGrowler\n\n\nHelp\n\n\nHome Button\n\n\nIdentify\n\n\nLayer Control (Table of Contents)\n\n\nLegend\n\n\nLocate Button (Geolocation)\n\n\nMapInfo\n\n\nMeasurement\n\n\nOverview Map\n\n\nPrint\n\n\nScalebar\n\n\nStreetView\n\n\nMap Right click menu with various widget functions.\n\n\nHighly configurable UI, right or left sidebars with widgets in both, top and bottom regions for other content.\n\n\n\n\nRead more about the core widgets\n. In addition, there is a growing number of \nwidgets contributed by the CMV developer community\n.",
            "title": "Introduction"
        },
        {
            "location": "/#cmv-the-configurable-map-viewer",
            "text": "",
            "title": "CMV - The Configurable Map Viewer"
        },
        {
            "location": "/#introduction",
            "text": "CMV  is a community-supported open source mapping framework. CMV works with the  Esri JavaScript API ,  ArcGIS Server ,  ArcGIS Online  and more.",
            "title": "Introduction"
        },
        {
            "location": "/#make-it-your-own",
            "text": "This JavaScript web app can be easily configured or used as a boilerplate/starting point for basic viewers. It also demonstrates best practices for modular design and OOP via classes in JS using dojo's great  declare  system.",
            "title": "Make It Your Own!"
        },
        {
            "location": "/#demo-site",
            "text": "Check out the demo site to get a taste for some of the capabilities you can use in your own applications.  http://demo.cmv.io/viewer/",
            "title": "Demo Site"
        },
        {
            "location": "/#getting-started",
            "text": "Installation  Configuring  Support  Development Environment",
            "title": "Getting Started"
        },
        {
            "location": "/#core-widgets",
            "text": "CMV comes with many \"core\" widgets including:   Base Maps  Bookmarks  Directions  Draw  Editor  Find  Geocoder  Growler  Help  Home Button  Identify  Layer Control (Table of Contents)  Legend  Locate Button (Geolocation)  MapInfo  Measurement  Overview Map  Print  Scalebar  StreetView  Map Right click menu with various widget functions.  Highly configurable UI, right or left sidebars with widgets in both, top and bottom regions for other content.   Read more about the core widgets . In addition, there is a growing number of  widgets contributed by the CMV developer community .",
            "title": "Core Widgets"
        },
        {
            "location": "/installation/",
            "text": "Installation\n\n\nYou can start building your first application using CMV with 4 easy steps:\n\n\n\n\n\n\nDownload the latest release \nhere\n.\n\n\n\n\n\n\nCopy the directory to your web server.\n\n\n\n\n\n\nConfigure the proper proxy page. Should work out of the box if using IIS.\n\n\n\n\n\n\nEdit the configuration files in the \nconfig\n directory to include your services, layers and desired widgets.",
            "title": "Installation"
        },
        {
            "location": "/installation/#installation",
            "text": "You can start building your first application using CMV with 4 easy steps:    Download the latest release  here .    Copy the directory to your web server.    Configure the proper proxy page. Should work out of the box if using IIS.    Edit the configuration files in the  config  directory to include your services, layers and desired widgets.",
            "title": "Installation"
        },
        {
            "location": "/configure/",
            "text": "Configuration\n\n\nUse the configuration files in the \n/js/config\n folder to customize your own map layers, task urls and widgets. The base configuration file is \nviewer.js\n and the majority of your work will be here.\n\n\nMultiple cmv apps may be created by using several different config files, the default is \nviewer.js\n. This offers flexibility if you want to deploy more than one CMV on your site by using a url to call different configs within different \nviewer.js\n files. For example \nhttp://YourServerName/viewer/?config=viewer2\n to load a separate config file in config folder or to a completely different folder \nhttp://YourServerName/viewer/?config=./js/newconfig/viewer\n\n\nSometimes the configuration object for a widget can be quite involved and length. In those cases, it often makes it easier to separate that widget's configuration into a separate file. Configurations for the \nBasemaps\n and \nIdentify\n widgets are frequently maintained this way.",
            "title": "Configure"
        },
        {
            "location": "/configure/#configuration",
            "text": "Use the configuration files in the  /js/config  folder to customize your own map layers, task urls and widgets. The base configuration file is  viewer.js  and the majority of your work will be here.  Multiple cmv apps may be created by using several different config files, the default is  viewer.js . This offers flexibility if you want to deploy more than one CMV on your site by using a url to call different configs within different  viewer.js  files. For example  http://YourServerName/viewer/?config=viewer2  to load a separate config file in config folder or to a completely different folder  http://YourServerName/viewer/?config=./js/newconfig/viewer  Sometimes the configuration object for a widget can be quite involved and length. In those cases, it often makes it easier to separate that widget's configuration into a separate file. Configurations for the  Basemaps  and  Identify  widgets are frequently maintained this way.",
            "title": "Configuration"
        },
        {
            "location": "/support/",
            "text": "CMV Support and Community\n\n\nGIS StackExchange\n\n\nYou can ask questions about CMV over at \ngis.stackexchange.com\n. Please review the previously posted questions and answers before posting your own. Be sure to tag your questions with \ncmv\n or \nconfigurable-map-viewer\n so the community can find your questions and provide answers.\n\n\nGitter.im Chat Room\n\n\nWe have a \ngitter.im chat room\n. Come on by if you have questions. The community is very helpful.",
            "title": "Support"
        },
        {
            "location": "/support/#cmv-support-and-community",
            "text": "",
            "title": "CMV Support and Community"
        },
        {
            "location": "/support/#gis-stackexchange",
            "text": "You can ask questions about CMV over at  gis.stackexchange.com . Please review the previously posted questions and answers before posting your own. Be sure to tag your questions with  cmv  or  configurable-map-viewer  so the community can find your questions and provide answers.",
            "title": "GIS StackExchange"
        },
        {
            "location": "/support/#gitterim-chat-room",
            "text": "We have a  gitter.im chat room . Come on by if you have questions. The community is very helpful.",
            "title": "Gitter.im Chat Room"
        },
        {
            "location": "/develop/",
            "text": "Setting up a development environment\n\n\nThis project uses grunt to automate tasks like minifying css and js as well as js linting and css prefixing.\n\n\nTo get started setup you dev machine:\n\n\n\n\n\n\nInstall \nnode\n.\n\n\n\n\n\n\nInstall the grunt cli (command line interface) globally from the command line with : \nnpm install -g grunt-cli\n, this only needs to be done once per dev machine.\n\n\n\n\n\n\nInstall jshint globally from the command line with : \nnpm install -g jshint\n, this only needs to be done once per dev machine.\n\n\n\n\n\n\nGet the code and install dev dependencies:\n\n\n\n\nFork the repo into your own github account.\n\n\n\n\n2 Clone your fork and in cloned directory:\n\n\n- Install the local dev dependencies for the project in the repo from the command line: `npm install`, this only needs to be done once per dev machine.\n\n- Run grunt from the repo with: `grunt` this will launch a mini dev server and lint your js as you code.\n\n- Run grunt from the repo with: `grunt build` this will create a `dist` folder with minified code ready for deployment.\n\n- There are other grunt tasks, use: `grunt -h` to see a list.",
            "title": "Development Environment"
        },
        {
            "location": "/develop/#setting-up-a-development-environment",
            "text": "This project uses grunt to automate tasks like minifying css and js as well as js linting and css prefixing.",
            "title": "Setting up a development environment"
        },
        {
            "location": "/develop/#to-get-started-setup-you-dev-machine",
            "text": "Install  node .    Install the grunt cli (command line interface) globally from the command line with :  npm install -g grunt-cli , this only needs to be done once per dev machine.    Install jshint globally from the command line with :  npm install -g jshint , this only needs to be done once per dev machine.",
            "title": "To get started setup you dev machine:"
        },
        {
            "location": "/develop/#get-the-code-and-install-dev-dependencies",
            "text": "Fork the repo into your own github account.   2 Clone your fork and in cloned directory:  - Install the local dev dependencies for the project in the repo from the command line: `npm install`, this only needs to be done once per dev machine.\n\n- Run grunt from the repo with: `grunt` this will launch a mini dev server and lint your js as you code.\n\n- Run grunt from the repo with: `grunt build` this will create a `dist` folder with minified code ready for deployment.\n\n- There are other grunt tasks, use: `grunt -h` to see a list.",
            "title": "Get the code and install dev dependencies:"
        },
        {
            "location": "/CHANGELOG/",
            "text": "2017-02-10\n\n\n\n\nMerge pull request \n#666\n from roemhildtg/use-inherited-mixins\n    Use inherited mixins\n\n\nremove extra promiseAll reference\n\n\npass null to create 'all' widgets\n\n\nMerge branch 'use-inherited-mixins' of https://github.com/roemhildtg/cmv-app into HEAD\n\n\nCleanup https://github.com/cmv/cmv-app/pull/666\n\n\n\n\n2017-02-06\n\n\n\n\nMerge branch 'develop' into use-inherited-mixins\n\n\nMerge pull request \n#664\n from roemhildtg/identify-graphics-and-dynamic-layers\n    Override api's default graphic identify function and identify dynamic layers additionally\n\n\n\n\n2017-01-31\n\n\n\n\nreset viewer.js to develop\n\n\nrename preStartup to postConfig for clarity\n\n\ncall \ncreatePanes\n when \nmapDeferred\n resolves\n\n\nfix lint errors\n\n\nfix lint error\n\n\nMerge branch 'develop' into develop\n\n\nOverride api's default graphic identify function and identify dynamic layers additionally\n\n\n\n\n2017-01-22\n\n\n\n\nMerge pull request \n#663\n from cmv/feature/move-titlePane-icons-to-config\n    Make the icons for the tilePanes configurable\n\n\nMake the icons for the tilePanes configurable in viewer.js and remove the classes from the css.\n\n\n\n\n2017-01-18\n\n\n\n\nadd documentation and fix typo\n\n\nremove console.log\n\n\noverride createMap method if mixin returns a deferred\n\n\nas a result, order is not important with map/webmap mixins\n\n\n\n\n\n\nuse createMap method to allow mixins to modify map before resolving deferred\n\n\n\n\n2017-01-17\n\n\n\n\nasync loading of loadConfig and preStartup methods\n\n\n\n\n2017-01-15\n\n\n\n\nimplement an 'init' and 'startup' method in mixins and utilize deferreds for async ops\n\n\n\n\n2017-01-09\n\n\n\n\nMerge pull request \n#661\n from cmv/fix/adjustments-to-loading-pane-widgets\n    Adjustments to loading of pane widgets\n\n\nMake sure the first pane widget is at position 0 to avoid error.\n\n\ncorrectly avoid the 'outer' and 'center' panes.\n\n\nEnsure that all titlePane and contentPane widgets have a placeAt parameter so they are loaded first.\n\n\nMerge pull request \n#660\n from roemhildtg/fix-legend-layer-visibility\n    FIX: update legend when maps \nupdate-end\n event is fired\n\n\nMerge remote-tracking branch 'origin/develop' into develop\n\n\nFIX: update legend when maps \nupdate-end\n event is fired\n\n\nadds new gis/dijit/Legend widget from https://github.com/cmv/cmv-app/issues/659\n\n\nfixes https://github.com/cmv/cmv-app/issues/340\n\n\nfixes https://github.com/cmv/cmv-app/issues/294\n\n\n\n\n\n\n\n\n2016-12-31\n\n\n\n\nMerge pull request \n#655\n from cmv/feature/formatters-for-feature-layers\n    Enable identify formatters for feature layers.\n\n\n\n\n2016-12-25\n\n\n\n\nThe Esri geometryEngine can mess with the geometry passed to it so we will clone it first.\n\n\n\n\n2016-12-21\n\n\n\n\nEnable identify formatters for feature layers.\n    Pass the feature geometry to formatter to allow for calculated area/length/position/etc.\n\n\n\n\n2016-12-17\n\n\n\n\nMerge pull request \n#652\n from cmv/fix/styling-esri-directions-print-button\n    fix the styling of print button in the Esri directions widget\n\n\nMerge branch 'develop' into fix/styling-esri-directions-print-button\n\n\nMerge pull request \n#651\n from cmv/feature/print-results-order\n    Allow option for print results to sort from newest to oldest.\n\n\nfix the styling of print button in the Esri directions widget\n\n\nMerge branch 'develop' into feature/print-results-order\n\n\nMerge pull request \n#648\n from roemhildtg/identify-layer-add-topic\n    make identify listen for new layer contol layer adds\n\n\nallow option for print results to sort from newest to oldest.\n    add a timestamp to title attribute of print results.\n\n\n\n\n2016-12-11\n\n\n\n\nadd missing jsdoc comments\n\n\nmake identify listen for new layer adds topic\n\n\nMerge pull request \n#649\n from cmv/feature/update-to-esri-jsapi-3.19\n    Update to Esri JS API upcoming version 3.19\n\n\nremove specific package references for put and xstyle. Esri now includes the updated versions with the JS API so the prior work-around is no longer necessary.\n\n\nUpdate to proj4js version 2.3.15\n\n\nupdate to Font-Awesome version 4.70\n\n\nupdate to Esri JS API upcoming version 3.19\n\n\n\n\n2016-12-04\n\n\n\n\nMerge pull request \n#645\n from cmv/feature/add-widget-loading-indicator\n    Add a simple loading indicator for titlePane and contentPane widgets.\n\n\nMerge branch 'develop' into feature/add-widget-loading-indicator\n\n\nMerge pull request \n#644\n from cmv/fixes/adjust-streeview-stylesheet\n    Fix StreetView Stylesheet and allow Google API version to be configured.\n\n\nMerge branch 'develop' into fixes/adjust-streeview-stylesheet\n\n\nMerge pull request \n#643\n from cmv/feature/new-widget-types\n    adds 3 new widget types: loading, layout and layer.\n\n\n\n\n2016-12-03\n\n\n\n\nAdd a simple loading indicator for titlePane and contentPane widgets.\n\n\n\n\n2016-12-02\n\n\n\n\nAdd position:relative to the widget's container div so the absolutely positioned button doesn't appear at the top of the page.\n    All the version of the Google API to be set in the app configuration file.\n\n\nremove some braces that should not have been there.\n\n\nadds 3 new widget types: loading, layout and layer.\n    adds 3 new entry points within the Controller when widgets can be created.\n    use the widget's key internally when no id is available\n\n\n\n\n2016-11-18\n\n\n\n\nMerge pull request \n#634\n from cmv/fix/add-back-basemaps-widget-config\n    basemaps widget config should not have been removed from viewer.js\n\n\nbasemaps widget config should not have been removed from viewer.js\n\n\n\n\n2016-11-15\n\n\n\n\nMerge pull request \n#632\n from roemhildtg/fix-628-contentPane-sidebar\n    fixes https://github.com/cmv/cmv-app/issues/628\n\n\nfixes https://github.com/cmv/cmv-app/issues/628\n\n\n\n\n2016-11-01\n\n\n\n\nMerge pull request \n#626\n from cmv/feature/add-support-for-webmaps\n    Add support for webmaps\n\n\nMerge branch 'develop' into feature/add-support-for-webmaps\n\n\nMerge pull request \n#625\n from cmv/feature/add-basemap-gallery-widget\n    Add new basemap gallery widget\n\n\nMerge branch 'develop' into feature/add-basemap-gallery-widget\n\n\nMerge pull request \n#624\n from cmv/feature/basemap-widget-combine-all-basemaps-as-one\n    basemap widget - support custom and agol basemaps at the same time\n\n\n\n\n2016-10-31\n\n\n\n\nAdd support for webmaps\n\n\nsupport combined custom and agol basemaps. \nmode\n is no longer necessary.\n\n\ninclude custom basemap as example.\n\n\nLet Esri handle the i18n title for Esri basemaps. Still can be overridden in config\n\n\n\n\n2016-10-30\n\n\n\n\nnew BasemapGallery widget\n\n\ncleanup the bottom border for titlepanes\n\n\nMerge pull request \n#622\n from cmv/fix/floating-titlepane-chrome-55\n    Fix titlePane issue effecting IE 11/M.S. Edge and now Chrome v 55\n\n\nMerge branch 'develop' into fix/floating-titlepane-chrome-55\n\n\nMerge pull request \n#621\n from cmv/fix/identify-widget-checkVisibilityRecursive-use-sublayer's-id\n    Identify widget - account for hard-coded sublayer IDs in checkVisibilityRecursive\n\n\n\n\n2016-10-29\n\n\n\n\nAccount for hard-coded sublayer IDs\n    the id may not be the same as the index.to layerInfos array\n\n\nfix issue in dojo mover class causing IE and now Chrome v 55 to not let go of the titlePane when mouse is released.\n\n\n\n\n2016-10-09\n\n\n\n\nMerge pull request \n#618\n from roemhildtg/proposal-custom-identify-formatter\n    Add the ability to add custom field formatters\n\n\nCleanup\n\n\nMixin default popup template options with user provided options.\n\n\nadds default formatters where possible\n\n\nFix indent\n\n\nMerge remote-tracking branch 'origin/develop' into proposal-custom-identify-formatter\n\n\n\n\n2016-10-08\n\n\n\n\nAdd the ability to add custom field formatters\n\n\nMerge pull request \n#617\n from roemhildtg/fix-603-sublayer-menu\n    Fixes sublayer menu not appearing for single dynamic layer\n\n\nFix linting issues.\n\n\n\n\n2016-10-07\n\n\n\n\nfix typo\n\n\nFixes https://github.com/cmv/cmv-app/issues/603 and adds menu examples in viewer config\n\n\n\n\n2016-10-05\n\n\n\n\nMerge pull request \n#613\n from roemhildtg/fix-broken-pane-toggle\n    Fix broken pane toggle\n\n\nadd third argument suppressEvent to togglePane function\n\n\nMerge remote-tracking branch 'origin/develop' into fix-broken-pane-toggle\n\n\nMerge pull request \n#615\n from cmv/feature/make-flat-theme-the-default\n    Make dojo flat the default theme\n\n\nMerge branch 'develop' into feature/make-flat-theme-the-default\n\n\nMerge pull request \n#614\n from cmv/fix/revert-using-our-own-drag-delay\n    remove use of our own (unreliable) drag delay for floating windows\n\n\n\n\n2016-10-04\n\n\n\n\n2 adjustments to theme css.\n\n\nswitch to flat theme\n\n\nthis removes the use of our own (unreliable) drag delay for floating windows.\n    dojo included with ESRI JS API 3.17+ adds detection for MS Edge browser so\n    we can use that as a more reliable approach to solving the original issue \n#379\n\n    with dragging floating windows in Internet Explorer and Edge browsers.\n\n\nFix broken toggle pane buttons\n\n\n\n\n2016-10-03\n\n\n\n\nMerge pull request \n#609\n from cmv/feature/update-package.json-for-2.0.0-beta.1\n    update package dependencies and bump the version number.\n\n\n\n\n2016-10-02\n\n\n\n\nupdate package dependencies and bump the version number.\n\n\nMerge pull request \n#608\n from roemhildtg/fix-find-widget-missing-button\n    Add missing require for Find widget which periodically causes WidgetsInTemplate error\n\n\nMerge branch 'develop' into fix-find-widget-missing-button",
            "title": "Changelog"
        },
        {
            "location": "/CHANGELOG/#2017-02-10",
            "text": "Merge pull request  #666  from roemhildtg/use-inherited-mixins\n    Use inherited mixins  remove extra promiseAll reference  pass null to create 'all' widgets  Merge branch 'use-inherited-mixins' of https://github.com/roemhildtg/cmv-app into HEAD  Cleanup https://github.com/cmv/cmv-app/pull/666",
            "title": "2017-02-10"
        },
        {
            "location": "/CHANGELOG/#2017-02-06",
            "text": "Merge branch 'develop' into use-inherited-mixins  Merge pull request  #664  from roemhildtg/identify-graphics-and-dynamic-layers\n    Override api's default graphic identify function and identify dynamic layers additionally",
            "title": "2017-02-06"
        },
        {
            "location": "/CHANGELOG/#2017-01-31",
            "text": "reset viewer.js to develop  rename preStartup to postConfig for clarity  call  createPanes  when  mapDeferred  resolves  fix lint errors  fix lint error  Merge branch 'develop' into develop  Override api's default graphic identify function and identify dynamic layers additionally",
            "title": "2017-01-31"
        },
        {
            "location": "/CHANGELOG/#2017-01-22",
            "text": "Merge pull request  #663  from cmv/feature/move-titlePane-icons-to-config\n    Make the icons for the tilePanes configurable  Make the icons for the tilePanes configurable in viewer.js and remove the classes from the css.",
            "title": "2017-01-22"
        },
        {
            "location": "/CHANGELOG/#2017-01-18",
            "text": "add documentation and fix typo  remove console.log  override createMap method if mixin returns a deferred  as a result, order is not important with map/webmap mixins    use createMap method to allow mixins to modify map before resolving deferred",
            "title": "2017-01-18"
        },
        {
            "location": "/CHANGELOG/#2017-01-17",
            "text": "async loading of loadConfig and preStartup methods",
            "title": "2017-01-17"
        },
        {
            "location": "/CHANGELOG/#2017-01-15",
            "text": "implement an 'init' and 'startup' method in mixins and utilize deferreds for async ops",
            "title": "2017-01-15"
        },
        {
            "location": "/CHANGELOG/#2017-01-09",
            "text": "Merge pull request  #661  from cmv/fix/adjustments-to-loading-pane-widgets\n    Adjustments to loading of pane widgets  Make sure the first pane widget is at position 0 to avoid error.  correctly avoid the 'outer' and 'center' panes.  Ensure that all titlePane and contentPane widgets have a placeAt parameter so they are loaded first.  Merge pull request  #660  from roemhildtg/fix-legend-layer-visibility\n    FIX: update legend when maps  update-end  event is fired  Merge remote-tracking branch 'origin/develop' into develop  FIX: update legend when maps  update-end  event is fired  adds new gis/dijit/Legend widget from https://github.com/cmv/cmv-app/issues/659  fixes https://github.com/cmv/cmv-app/issues/340  fixes https://github.com/cmv/cmv-app/issues/294",
            "title": "2017-01-09"
        },
        {
            "location": "/CHANGELOG/#2016-12-31",
            "text": "Merge pull request  #655  from cmv/feature/formatters-for-feature-layers\n    Enable identify formatters for feature layers.",
            "title": "2016-12-31"
        },
        {
            "location": "/CHANGELOG/#2016-12-25",
            "text": "The Esri geometryEngine can mess with the geometry passed to it so we will clone it first.",
            "title": "2016-12-25"
        },
        {
            "location": "/CHANGELOG/#2016-12-21",
            "text": "Enable identify formatters for feature layers.\n    Pass the feature geometry to formatter to allow for calculated area/length/position/etc.",
            "title": "2016-12-21"
        },
        {
            "location": "/CHANGELOG/#2016-12-17",
            "text": "Merge pull request  #652  from cmv/fix/styling-esri-directions-print-button\n    fix the styling of print button in the Esri directions widget  Merge branch 'develop' into fix/styling-esri-directions-print-button  Merge pull request  #651  from cmv/feature/print-results-order\n    Allow option for print results to sort from newest to oldest.  fix the styling of print button in the Esri directions widget  Merge branch 'develop' into feature/print-results-order  Merge pull request  #648  from roemhildtg/identify-layer-add-topic\n    make identify listen for new layer contol layer adds  allow option for print results to sort from newest to oldest.\n    add a timestamp to title attribute of print results.",
            "title": "2016-12-17"
        },
        {
            "location": "/CHANGELOG/#2016-12-11",
            "text": "add missing jsdoc comments  make identify listen for new layer adds topic  Merge pull request  #649  from cmv/feature/update-to-esri-jsapi-3.19\n    Update to Esri JS API upcoming version 3.19  remove specific package references for put and xstyle. Esri now includes the updated versions with the JS API so the prior work-around is no longer necessary.  Update to proj4js version 2.3.15  update to Font-Awesome version 4.70  update to Esri JS API upcoming version 3.19",
            "title": "2016-12-11"
        },
        {
            "location": "/CHANGELOG/#2016-12-04",
            "text": "Merge pull request  #645  from cmv/feature/add-widget-loading-indicator\n    Add a simple loading indicator for titlePane and contentPane widgets.  Merge branch 'develop' into feature/add-widget-loading-indicator  Merge pull request  #644  from cmv/fixes/adjust-streeview-stylesheet\n    Fix StreetView Stylesheet and allow Google API version to be configured.  Merge branch 'develop' into fixes/adjust-streeview-stylesheet  Merge pull request  #643  from cmv/feature/new-widget-types\n    adds 3 new widget types: loading, layout and layer.",
            "title": "2016-12-04"
        },
        {
            "location": "/CHANGELOG/#2016-12-03",
            "text": "Add a simple loading indicator for titlePane and contentPane widgets.",
            "title": "2016-12-03"
        },
        {
            "location": "/CHANGELOG/#2016-12-02",
            "text": "Add position:relative to the widget's container div so the absolutely positioned button doesn't appear at the top of the page.\n    All the version of the Google API to be set in the app configuration file.  remove some braces that should not have been there.  adds 3 new widget types: loading, layout and layer.\n    adds 3 new entry points within the Controller when widgets can be created.\n    use the widget's key internally when no id is available",
            "title": "2016-12-02"
        },
        {
            "location": "/CHANGELOG/#2016-11-18",
            "text": "Merge pull request  #634  from cmv/fix/add-back-basemaps-widget-config\n    basemaps widget config should not have been removed from viewer.js  basemaps widget config should not have been removed from viewer.js",
            "title": "2016-11-18"
        },
        {
            "location": "/CHANGELOG/#2016-11-15",
            "text": "Merge pull request  #632  from roemhildtg/fix-628-contentPane-sidebar\n    fixes https://github.com/cmv/cmv-app/issues/628  fixes https://github.com/cmv/cmv-app/issues/628",
            "title": "2016-11-15"
        },
        {
            "location": "/CHANGELOG/#2016-11-01",
            "text": "Merge pull request  #626  from cmv/feature/add-support-for-webmaps\n    Add support for webmaps  Merge branch 'develop' into feature/add-support-for-webmaps  Merge pull request  #625  from cmv/feature/add-basemap-gallery-widget\n    Add new basemap gallery widget  Merge branch 'develop' into feature/add-basemap-gallery-widget  Merge pull request  #624  from cmv/feature/basemap-widget-combine-all-basemaps-as-one\n    basemap widget - support custom and agol basemaps at the same time",
            "title": "2016-11-01"
        },
        {
            "location": "/CHANGELOG/#2016-10-31",
            "text": "Add support for webmaps  support combined custom and agol basemaps.  mode  is no longer necessary.  include custom basemap as example.  Let Esri handle the i18n title for Esri basemaps. Still can be overridden in config",
            "title": "2016-10-31"
        },
        {
            "location": "/CHANGELOG/#2016-10-30",
            "text": "new BasemapGallery widget  cleanup the bottom border for titlepanes  Merge pull request  #622  from cmv/fix/floating-titlepane-chrome-55\n    Fix titlePane issue effecting IE 11/M.S. Edge and now Chrome v 55  Merge branch 'develop' into fix/floating-titlepane-chrome-55  Merge pull request  #621  from cmv/fix/identify-widget-checkVisibilityRecursive-use-sublayer's-id\n    Identify widget - account for hard-coded sublayer IDs in checkVisibilityRecursive",
            "title": "2016-10-30"
        },
        {
            "location": "/CHANGELOG/#2016-10-29",
            "text": "Account for hard-coded sublayer IDs\n    the id may not be the same as the index.to layerInfos array  fix issue in dojo mover class causing IE and now Chrome v 55 to not let go of the titlePane when mouse is released.",
            "title": "2016-10-29"
        },
        {
            "location": "/CHANGELOG/#2016-10-09",
            "text": "Merge pull request  #618  from roemhildtg/proposal-custom-identify-formatter\n    Add the ability to add custom field formatters  Cleanup  Mixin default popup template options with user provided options.  adds default formatters where possible  Fix indent  Merge remote-tracking branch 'origin/develop' into proposal-custom-identify-formatter",
            "title": "2016-10-09"
        },
        {
            "location": "/CHANGELOG/#2016-10-08",
            "text": "Add the ability to add custom field formatters  Merge pull request  #617  from roemhildtg/fix-603-sublayer-menu\n    Fixes sublayer menu not appearing for single dynamic layer  Fix linting issues.",
            "title": "2016-10-08"
        },
        {
            "location": "/CHANGELOG/#2016-10-07",
            "text": "fix typo  Fixes https://github.com/cmv/cmv-app/issues/603 and adds menu examples in viewer config",
            "title": "2016-10-07"
        },
        {
            "location": "/CHANGELOG/#2016-10-05",
            "text": "Merge pull request  #613  from roemhildtg/fix-broken-pane-toggle\n    Fix broken pane toggle  add third argument suppressEvent to togglePane function  Merge remote-tracking branch 'origin/develop' into fix-broken-pane-toggle  Merge pull request  #615  from cmv/feature/make-flat-theme-the-default\n    Make dojo flat the default theme  Merge branch 'develop' into feature/make-flat-theme-the-default  Merge pull request  #614  from cmv/fix/revert-using-our-own-drag-delay\n    remove use of our own (unreliable) drag delay for floating windows",
            "title": "2016-10-05"
        },
        {
            "location": "/CHANGELOG/#2016-10-04",
            "text": "2 adjustments to theme css.  switch to flat theme  this removes the use of our own (unreliable) drag delay for floating windows.\n    dojo included with ESRI JS API 3.17+ adds detection for MS Edge browser so\n    we can use that as a more reliable approach to solving the original issue  #379 \n    with dragging floating windows in Internet Explorer and Edge browsers.  Fix broken toggle pane buttons",
            "title": "2016-10-04"
        },
        {
            "location": "/CHANGELOG/#2016-10-03",
            "text": "Merge pull request  #609  from cmv/feature/update-package.json-for-2.0.0-beta.1\n    update package dependencies and bump the version number.",
            "title": "2016-10-03"
        },
        {
            "location": "/CHANGELOG/#2016-10-02",
            "text": "update package dependencies and bump the version number.  Merge pull request  #608  from roemhildtg/fix-find-widget-missing-button\n    Add missing require for Find widget which periodically causes WidgetsInTemplate error  Merge branch 'develop' into fix-find-widget-missing-button",
            "title": "2016-10-02"
        },
        {
            "location": "/configure/",
            "text": "Configuration\n\n\nUse the configuration files in the \n/js/config\n folder to customize your own map layers, task urls and widgets. The base configuration file is \nviewer.js\n and the majority of your work will be here.\n\n\nMultiple cmv apps may be created by using several different config files, the default is \nviewer.js\n. This offers flexibility if you want to deploy more than one CMV on your site by using a url to call different configs within different \nviewer.js\n files. For example \nhttp://YourServerName/viewer/?config=viewer2\n to load a separate config file in config folder or to a completely different folder \nhttp://YourServerName/viewer/?config=./js/newconfig/viewer\n\n\nSometimes the configuration object for a widget can be quite involved and length. In those cases, it often makes it easier to separate that widget's configuration into a separate file. Configurations for the \nBasemaps\n and \nIdentify\n widgets are frequently maintained this way.",
            "title": "Introduction"
        },
        {
            "location": "/configure/#configuration",
            "text": "Use the configuration files in the  /js/config  folder to customize your own map layers, task urls and widgets. The base configuration file is  viewer.js  and the majority of your work will be here.  Multiple cmv apps may be created by using several different config files, the default is  viewer.js . This offers flexibility if you want to deploy more than one CMV on your site by using a url to call different configs within different  viewer.js  files. For example  http://YourServerName/viewer/?config=viewer2  to load a separate config file in config folder or to a completely different folder  http://YourServerName/viewer/?config=./js/newconfig/viewer  Sometimes the configuration object for a widget can be quite involved and length. In those cases, it often makes it easier to separate that widget's configuration into a separate file. Configurations for the  Basemaps  and  Identify  widgets are frequently maintained this way.",
            "title": "Configuration"
        },
        {
            "location": "/configure/viewer/",
            "text": "Viewer.js configuration file\n\n\nUse this file to configure CMV and \"Make it your own\".\n\n\nThe following sections are contained within the viewer.js configuration file.\n\n\nHeader Section\n\n\nVarious Config and Preloading Scripts\n\n\nConfig Definition\n\n\nThe config definition is a plain javascript object that accepts the following properties:\n\n\n\n\n\n\n\n\nKey\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nisDebug\n\n\nBoolean\n\n\nUsed to enable \"debug mode\" in cmv\n\n\n\n\n\n\ndefaultMapClickMode\n\n\nString\n\n\nSets a default \"map click mode\" in cmv. Values allowed can vary by what widgets are included. For example, the identify widget uses the map click mode \nidentify\n. If the map click mode is not set to \nidentify\n, the widget will not be activated by default.\n\n\n\n\n\n\nmapOptions\n\n\nObject\n\n\nSee \nMap Options\n\n\n\n\n\n\ntitles\n\n\nObject\n\n\nSee \nTitles\n\n\n\n\n\n\npanes\n\n\nObject\n\n\nSee \nPanes\n\n\n\n\n\n\nwebMapId\n\n\nString\n\n\nThe web map ID to use from ArcGIS Online, example: \n'ef9c7fbda731474d98647bebb4b33c20'\n\n\n\n\n\n\nwebMapOptions\n\n\nObject\n\n\nSee \nWeb Map Options\n\n\n\n\n\n\nlayerTypes\n\n\nObject\nString, String\n\n\nA simple object that allows you to use new layer types in CMV. The key is a string that corresponds to the layers \ntype\n referenced in the cmv operational layers and the value is the path to the custom layer module.\n\n\n\n\n\n\nwidgetTypes\n\n\nObject\nString, String\n\n\nSimilar to \nlayerTypes\n but lets you use new widget types in CMV other than the default \n'titlePane'\n, etc.\n\n\n\n\n\n\noperationalLayers\n\n\nArray\nObject\n\n\nSee \nOperational Layers\n\n\n\n\n\n\nwidgets\n\n\nObject\n\n\nSee \nWidgets",
            "title": "viewer.js"
        },
        {
            "location": "/configure/viewer/#viewerjs-configuration-file",
            "text": "Use this file to configure CMV and \"Make it your own\".  The following sections are contained within the viewer.js configuration file.",
            "title": "Viewer.js configuration file"
        },
        {
            "location": "/configure/viewer/#header-section",
            "text": "Various Config and Preloading Scripts",
            "title": "Header Section"
        },
        {
            "location": "/configure/viewer/#config-definition",
            "text": "The config definition is a plain javascript object that accepts the following properties:     Key  Type  Description      isDebug  Boolean  Used to enable \"debug mode\" in cmv    defaultMapClickMode  String  Sets a default \"map click mode\" in cmv. Values allowed can vary by what widgets are included. For example, the identify widget uses the map click mode  identify . If the map click mode is not set to  identify , the widget will not be activated by default.    mapOptions  Object  See  Map Options    titles  Object  See  Titles    panes  Object  See  Panes    webMapId  String  The web map ID to use from ArcGIS Online, example:  'ef9c7fbda731474d98647bebb4b33c20'    webMapOptions  Object  See  Web Map Options    layerTypes  Object String, String  A simple object that allows you to use new layer types in CMV. The key is a string that corresponds to the layers  type  referenced in the cmv operational layers and the value is the path to the custom layer module.    widgetTypes  Object String, String  Similar to  layerTypes  but lets you use new widget types in CMV other than the default  'titlePane' , etc.    operationalLayers  Array Object  See  Operational Layers    widgets  Object  See  Widgets",
            "title": "Config Definition"
        },
        {
            "location": "/configure/app/",
            "text": "App Mixin and Config\n\n\nIn CMV, the application has been split into several different pieces. Each of these\nmixins can be customized to enable loading different sources of configs, different\nlayout types, or even an entirely different dojo application.\n\n\nIn addition, new pieces can be added and replaced as necessary when building custom\nconfigurations of cmv.\n\n\nThe file \nconfig/app.js\n is used to bootstrap and load cmv's config, layout, map,\nand widgets. \napp.js\n loads the required components and creates a new application\nfrom the components. It uses \ndojo/declare\n to call each mixin's methods.\n\n\nThe first mixins on the list will be the last ones called. In the example below,\n\n_ControllerBase\n is called first.\n\n\nvar App = declare([\n\n    // add custom mixins here...note order may be important and\n    // overriding certain methods incorrectly may break the app\n    // First on the list are last called last, for instance the startup\n    // method on _ControllerBase is called FIRST, and _LayoutMixin is called LAST\n    // for the most part they are interchangeable, except _ConfigMixin\n    // and _ControllerBase\n    //\n    _LayoutMixin,\n    _WidgetsMixin,\n    _MapMixin,\n\n    // configMixin should be right before _ControllerBase so it is\n    // called first to initialize the config object\n    _ConfigMixin,\n\n    // controller base needs to be last\n    _ControllerBase\n]);\n\n\n\n\nMixin Methods\n\n\nEach mixin may implement one or all of these methods depending on its needs. The\ncmv app loads in 3 stages:\n\n\n\n\nLoad Config - Load and modify the config by fetching any files necessary and perform any config validation\n\n\nPost Config - The config has been loaded, perform any variable initialzing and pre-loading before the\n app starts up\n\n\nStartup - Startup the map, widgets, layers, etc\n\n\n\n\nloadConfig(wait)\n\n\nLoads or modify the config object before the app begins initializing. If the method\nperforms any async processes, it should return pass a deferred to \nthis.inherited\n\nand return the value of \nthis.inherited\n or the deferred if null.\n\n\nParameters:\n\n\nwait\n - an optional deferred object that needs to resolve before processing can continue\nto the current mixin.\n\n\nReturns:\n\n\nA deferred object or \nthis.inherited()\n.\n\n\nExample:\n\n\nloadConfig: function (wait) {\n\n    // this will be used to make any inherited methods 'wait'\n    var waitDeferred = new Deferred();\n\n    if (wait) {\n\n        // if we need to wait for a previous deferred\n        // wait for it,\n        wait.then(lang.hitch(this, function () {\n\n          // do any config processing then resolve the waitDeferred\n\n        }));\n    } else {\n\n      // do any config processing then resolve the waitDeferred\n\n    }\n\n    // call any inherited methods\n    // pass our waitDeferred\n    // or if the inherited returns nothing, return our deferred\n    return this.inherited(arguments, [waitDeferred]) || waitDeferred;\n},\n\n\n\n\npostConfig(wait)\n\n\nA method that is run after all async config loading is finished. This method\ncan startup widgets that need to load before the app starts or initialize any\nvariables on the app. It is similar to the \nloadConfig\n function in that if the method\nperforms any async processes, it should return pass a deferred to \nthis.inherited\n\nand return the value of \nthis.inherited\n or the deferred if null.\n\n\nloading\n type widgets are loaded at this time. \n\n\nParameters:\n\n\nwait\n - an optional deferred object that needs to resolve before processing can continue\nto the current mixin.\n\n\nReturns:\n\n\nThe value of \nthis.inherited()\n or a deferred object.\n\n\nstartup\n\n\nThe startup method for the mixin. This is the final stage of loading the app.\n\n\nDefault Mixin Details\n\n\nThe following mixins are provided with cmv by default.\n\n\n_ControllerBase\n\n\nThe base loading mixin. \nThis should come last in the list of mixins.\n\n\n_ConfigMixin\n\n\nThe config loading logic.\n\n\n_LayoutMixin\n\n\nThe mixin that sets up the layout and dom.\n\n\n_MapMixin\n\n\nThe mixin that sets up and loads the map and layers.",
            "title": "app.js"
        },
        {
            "location": "/configure/app/#app-mixin-and-config",
            "text": "In CMV, the application has been split into several different pieces. Each of these\nmixins can be customized to enable loading different sources of configs, different\nlayout types, or even an entirely different dojo application.  In addition, new pieces can be added and replaced as necessary when building custom\nconfigurations of cmv.  The file  config/app.js  is used to bootstrap and load cmv's config, layout, map,\nand widgets.  app.js  loads the required components and creates a new application\nfrom the components. It uses  dojo/declare  to call each mixin's methods.  The first mixins on the list will be the last ones called. In the example below, _ControllerBase  is called first.  var App = declare([\n\n    // add custom mixins here...note order may be important and\n    // overriding certain methods incorrectly may break the app\n    // First on the list are last called last, for instance the startup\n    // method on _ControllerBase is called FIRST, and _LayoutMixin is called LAST\n    // for the most part they are interchangeable, except _ConfigMixin\n    // and _ControllerBase\n    //\n    _LayoutMixin,\n    _WidgetsMixin,\n    _MapMixin,\n\n    // configMixin should be right before _ControllerBase so it is\n    // called first to initialize the config object\n    _ConfigMixin,\n\n    // controller base needs to be last\n    _ControllerBase\n]);",
            "title": "App Mixin and Config"
        },
        {
            "location": "/configure/app/#mixin-methods",
            "text": "Each mixin may implement one or all of these methods depending on its needs. The\ncmv app loads in 3 stages:   Load Config - Load and modify the config by fetching any files necessary and perform any config validation  Post Config - The config has been loaded, perform any variable initialzing and pre-loading before the\n app starts up  Startup - Startup the map, widgets, layers, etc",
            "title": "Mixin Methods"
        },
        {
            "location": "/configure/app/#loadconfigwait",
            "text": "Loads or modify the config object before the app begins initializing. If the method\nperforms any async processes, it should return pass a deferred to  this.inherited \nand return the value of  this.inherited  or the deferred if null.  Parameters:  wait  - an optional deferred object that needs to resolve before processing can continue\nto the current mixin.  Returns:  A deferred object or  this.inherited() .  Example:  loadConfig: function (wait) {\n\n    // this will be used to make any inherited methods 'wait'\n    var waitDeferred = new Deferred();\n\n    if (wait) {\n\n        // if we need to wait for a previous deferred\n        // wait for it,\n        wait.then(lang.hitch(this, function () {\n\n          // do any config processing then resolve the waitDeferred\n\n        }));\n    } else {\n\n      // do any config processing then resolve the waitDeferred\n\n    }\n\n    // call any inherited methods\n    // pass our waitDeferred\n    // or if the inherited returns nothing, return our deferred\n    return this.inherited(arguments, [waitDeferred]) || waitDeferred;\n},",
            "title": "loadConfig(wait)"
        },
        {
            "location": "/configure/app/#postconfigwait",
            "text": "A method that is run after all async config loading is finished. This method\ncan startup widgets that need to load before the app starts or initialize any\nvariables on the app. It is similar to the  loadConfig  function in that if the method\nperforms any async processes, it should return pass a deferred to  this.inherited \nand return the value of  this.inherited  or the deferred if null.  loading  type widgets are loaded at this time.   Parameters:  wait  - an optional deferred object that needs to resolve before processing can continue\nto the current mixin.  Returns:  The value of  this.inherited()  or a deferred object.",
            "title": "postConfig(wait)"
        },
        {
            "location": "/configure/app/#startup",
            "text": "The startup method for the mixin. This is the final stage of loading the app.",
            "title": "startup"
        },
        {
            "location": "/configure/app/#default-mixin-details",
            "text": "The following mixins are provided with cmv by default.",
            "title": "Default Mixin Details"
        },
        {
            "location": "/configure/app/#_controllerbase",
            "text": "The base loading mixin.  This should come last in the list of mixins.",
            "title": "_ControllerBase"
        },
        {
            "location": "/configure/app/#_configmixin",
            "text": "The config loading logic.",
            "title": "_ConfigMixin"
        },
        {
            "location": "/configure/app/#_layoutmixin",
            "text": "The mixin that sets up the layout and dom.",
            "title": "_LayoutMixin"
        },
        {
            "location": "/configure/app/#_mapmixin",
            "text": "The mixin that sets up and loads the map and layers.",
            "title": "_MapMixin"
        },
        {
            "location": "/configure/header/",
            "text": "Header configuration in viewer.js\n\n\nThe header section is used to set up and configure various ArcGIS Javascript JS API options as well as anything else that needs to be set before the app begins loading. This includes items such as:\n\n\n\n\nProxy - URLS to proxy services \n\n\nGeometry Service\n\n\nGoogle Maps API Key (for Google Streetview and other widgets that may require the Google API)\n\n\nOther preinitialization logic\n\n\n\n\nEsri Configuration options in viewer.js\n\n\nBy default the following properties are set:\n\n\n    esriConfig.defaults.io.proxyUrl = 'proxy/proxy.ashx';\n    esriConfig.defaults.io.alwaysUseProxy = false;\n    esriConfig.defaults.geometryService = new GeometryService('https://tasks.arcgisonline.com/ArcGIS/rest/services/Geometry/GeometryServer');\n\n\n\n\nYou may also configure proxy rules by adding \n'esri/urlUtils'\n to your amd \ndefine\n block and function. Make sure the order of your module strings match the order of the modules listed in your function. \n\n\nFor the full list of configuration options visit \nthe ArcGIS Javascript API documentation\n\n\nGoogle API\n\n\nBy default the Google Maps loader is already imported to viewer.js, and you can set the key using the \nKEY\n property. \n\n\n    // https://developers.google.com/maps/documentation/javascript/get-api-key\n    GoogleMapsLoader.KEY = 'NOT-A-REAL-API-KEY';\n\n\n\n\nOther initialization scripts\n\n\nIf there are other initializations you would like to perform, the header area of the viewer.js is one option. For example, by default a \nbuildImageParameters\n function is defined which is used later to help us create Dynamic Map Service layer \nImage Parameters\n\n\nIn addition, as an example we have added a topic registration. This demonstrates how the layer control's menu topic works. However in the real world, it is best to keep these extra functions minimal and perhaps separate them into a different module or even build a separate widget. This will increase your possibilities of reusing the code in other CMV and Dojo apps.",
            "title": "header"
        },
        {
            "location": "/configure/header/#header-configuration-in-viewerjs",
            "text": "The header section is used to set up and configure various ArcGIS Javascript JS API options as well as anything else that needs to be set before the app begins loading. This includes items such as:   Proxy - URLS to proxy services   Geometry Service  Google Maps API Key (for Google Streetview and other widgets that may require the Google API)  Other preinitialization logic",
            "title": "Header configuration in viewer.js"
        },
        {
            "location": "/configure/header/#esri-configuration-options-in-viewerjs",
            "text": "By default the following properties are set:      esriConfig.defaults.io.proxyUrl = 'proxy/proxy.ashx';\n    esriConfig.defaults.io.alwaysUseProxy = false;\n    esriConfig.defaults.geometryService = new GeometryService('https://tasks.arcgisonline.com/ArcGIS/rest/services/Geometry/GeometryServer');  You may also configure proxy rules by adding  'esri/urlUtils'  to your amd  define  block and function. Make sure the order of your module strings match the order of the modules listed in your function.   For the full list of configuration options visit  the ArcGIS Javascript API documentation",
            "title": "Esri Configuration options in viewer.js"
        },
        {
            "location": "/configure/header/#google-api",
            "text": "By default the Google Maps loader is already imported to viewer.js, and you can set the key using the  KEY  property.       // https://developers.google.com/maps/documentation/javascript/get-api-key\n    GoogleMapsLoader.KEY = 'NOT-A-REAL-API-KEY';",
            "title": "Google API"
        },
        {
            "location": "/configure/header/#other-initialization-scripts",
            "text": "If there are other initializations you would like to perform, the header area of the viewer.js is one option. For example, by default a  buildImageParameters  function is defined which is used later to help us create Dynamic Map Service layer  Image Parameters  In addition, as an example we have added a topic registration. This demonstrates how the layer control's menu topic works. However in the real world, it is best to keep these extra functions minimal and perhaps separate them into a different module or even build a separate widget. This will increase your possibilities of reusing the code in other CMV and Dojo apps.",
            "title": "Other initialization scripts"
        },
        {
            "location": "/configure/mapOptions/",
            "text": "MapOptions Section of viewer.js\n\n\n\n\n\n\nset initial basemap, initial map center, zoom level, and sliderStyle. See \nMap Constructor\n parameters for all of the options available.\n\n\n\n\n\n\nCopyright Note For Your Map Services:\n CMV uses the compact build of the ArcGIS JavaScript API. This effects the \nshowAttribution:\n option where the compact build sets it to \nfalse\n by default. The result is that your copyright information will not be displayed on the map. In \nmapOptions:{}\n add \nshowAttribution: true\n to override the default setting when using the compact build of the API. See the three examples below on how to use \nshowAttribution:\n if you need to display a copyright with your map services.\n\n\n\n\n\n\nIf you want to have the large zoom slider in your map like this \nsliderStyle: 'large'\n, you will need to use the full build of the JavaScript API,  CMV uses the compact build by default.\n\n\n\n\n\n\nExample: mapOptions using a basemap from ArcGIS Online:\n\n\nmapOptions: {\n   basemap: 'streets',\n   center: [-98, 40],\n   zoom: 5,\n   sliderStyle: 'small',\n   showAttribution: true\n}\n\n\n\n\nExample: mapOptions using a custom basemap:\n\n\nIn the \ndefine()\n add references to \n'esri/dijit/Basemap'\n, \n'esri/dijit/BasemapLayer'\n and \n'esri/geometry/Point'\n\n\nmapOptions: {\n   basemap: new Basemap({\n        id: 'basemap1',\n        layers: [new BasemapLayer({\n        url: 'http://ServerName/arcgis/rest/services/BaseMapName/MapServer'\n        })]\n    }),\n    center: new Point({\n        x: 6356023.515330248,\n        y: 1917313.443425702,\n        spatialReference: {\n            wkid: 102642\n        }\n    }),\n    zoom: 5,\n    sliderStyle: 'small',\n    showAttribution: true\n}\n\n\n\n\nManually setting the levels of detail (LODs)\n\n\nIf you want to zoom in beyond the default levels of detail provided by your map services, you can manually set them by adding the \"lods\" property to your mapOptions object.\n\n\nmapOptions: {\n    basemap: 'streets',\n    center: [-96.59179687497497, 39.09596293629694],\n    zoom: 5,\n    sliderStyle: 'small',\n    lods: [\n        {\n            'level'     : 0,\n            'resolution': 156543.03392800014,\n            'scale'     : 591657527.591555\n        },\n        {\n            'level'     : 1,\n            'resolution': 78271.51696399994,\n            'scale'     : 295828763.795777\n        },\n        {\n            'level'     : 2,\n            'resolution': 39135.75848200009,\n            'scale'     : 147914381.897889\n        },\n        {\n            'level'     : 3,\n            'resolution': 19567.87924099992,\n            'scale'     : 73957190.948944\n        },\n        {\n            'level'     : 4,\n            'resolution': 9783.93962049996,\n            'scale'     : 36978595.474472\n        },\n        {\n            'level'     : 5,\n            'resolution': 4891.96981024998,\n            'scale'     : 18489297.737236\n        },\n        {\n            'level'     : 6,\n            'resolution': 2445.98490512499,\n            'scale'     : 9244648.868618\n        },\n        {\n            'level'     : 7,\n            'resolution': 1222.992452562495,\n            'scale'     : 4622324.434309\n        },\n        {\n            'level'     : 8,\n            'resolution': 611.4962262813797,\n            'scale'     : 2311162.217155\n        },\n        {\n            'level'     : 9,\n            'resolution': 305.74811314055756,\n            'scale'     : 1155581.108577\n        },\n        {\n            'level'     : 10,\n            'resolution': 152.87405657041106,\n            'scale'     : 577790.554289\n        },\n        {\n            'level'     : 11,\n            'resolution': 76.43702828507324,\n            'scale'     : 288895.277144\n        },\n        {\n            'level'     : 12,\n            'resolution': 38.21851414253662,\n            'scale'     : 144447.638572\n        },\n        {\n            'level'     : 13,\n            'resolution': 19.10925707126831,\n            'scale'     : 72223.819286\n        },\n        {\n            'level'     : 14,\n            'resolution': 9.554628535634155,\n            'scale'     : 36111.909643\n        },\n        {\n            'level'     : 15,\n            'resolution': 4.77731426794937,\n            'scale'     : 18055.954822\n        },\n        {\n            'level'     : 16,\n            'resolution': 2.388657133974685,\n            'scale'     : 9027.977411\n        },\n        {\n            'level'     : 17,\n            'resolution': 1.1943285668550503,\n            'scale'     : 4513.988705\n        },\n        {\n            'level'     : 18,\n            'resolution': 0.5971642835598172,\n            'scale'     : 2256.994353\n        },\n        {\n            'level'     : 19,\n            'resolution': 0.29858214164761665,\n            'scale'     : 1128.497176\n        },\n        {\n            'level'     : 20,\n            'resolution': 0.14929107082380833,\n            'scale'     : 564.248588\n        },\n        {\n            'level'     : 21,\n            'resolution': 0.07464553541190416,\n            'scale'     : 282.124294\n        }\n    ]\n},\n\n\n\n\nImportant Chrome Browser Tweak\n\n\nIf you notice or experience the map or the application flashing while zooming in \n out, or panning here is a workaround.\n\n\nIn \nconfig/viewer.js\n under Map Options add \nnavigationMode: 'classic'\n\n\nExample\n\n\nmapOptions: {\n   navigationMode: 'classic',\n   center: [-84.138794, 39.055701],\n   zoom: 11,\n   sliderStyle: 'small',\n   showAttribution: true\n}\n\n\n\n\nHere is a \nlink\n to the ArcGIS Javascript API docs for a more detailed explanation.",
            "title": "MapOptions"
        },
        {
            "location": "/configure/mapOptions/#mapoptions-section-of-viewerjs",
            "text": "set initial basemap, initial map center, zoom level, and sliderStyle. See  Map Constructor  parameters for all of the options available.    Copyright Note For Your Map Services:  CMV uses the compact build of the ArcGIS JavaScript API. This effects the  showAttribution:  option where the compact build sets it to  false  by default. The result is that your copyright information will not be displayed on the map. In  mapOptions:{}  add  showAttribution: true  to override the default setting when using the compact build of the API. See the three examples below on how to use  showAttribution:  if you need to display a copyright with your map services.    If you want to have the large zoom slider in your map like this  sliderStyle: 'large' , you will need to use the full build of the JavaScript API,  CMV uses the compact build by default.",
            "title": "MapOptions Section of viewer.js"
        },
        {
            "location": "/configure/mapOptions/#example-mapoptions-using-a-basemap-from-arcgis-online",
            "text": "mapOptions: {\n   basemap: 'streets',\n   center: [-98, 40],\n   zoom: 5,\n   sliderStyle: 'small',\n   showAttribution: true\n}",
            "title": "Example: mapOptions using a basemap from ArcGIS Online:"
        },
        {
            "location": "/configure/mapOptions/#example-mapoptions-using-a-custom-basemap",
            "text": "In the  define()  add references to  'esri/dijit/Basemap' ,  'esri/dijit/BasemapLayer'  and  'esri/geometry/Point'  mapOptions: {\n   basemap: new Basemap({\n        id: 'basemap1',\n        layers: [new BasemapLayer({\n        url: 'http://ServerName/arcgis/rest/services/BaseMapName/MapServer'\n        })]\n    }),\n    center: new Point({\n        x: 6356023.515330248,\n        y: 1917313.443425702,\n        spatialReference: {\n            wkid: 102642\n        }\n    }),\n    zoom: 5,\n    sliderStyle: 'small',\n    showAttribution: true\n}",
            "title": "Example: mapOptions using a custom basemap:"
        },
        {
            "location": "/configure/mapOptions/#manually-setting-the-levels-of-detail-lods",
            "text": "If you want to zoom in beyond the default levels of detail provided by your map services, you can manually set them by adding the \"lods\" property to your mapOptions object.  mapOptions: {\n    basemap: 'streets',\n    center: [-96.59179687497497, 39.09596293629694],\n    zoom: 5,\n    sliderStyle: 'small',\n    lods: [\n        {\n            'level'     : 0,\n            'resolution': 156543.03392800014,\n            'scale'     : 591657527.591555\n        },\n        {\n            'level'     : 1,\n            'resolution': 78271.51696399994,\n            'scale'     : 295828763.795777\n        },\n        {\n            'level'     : 2,\n            'resolution': 39135.75848200009,\n            'scale'     : 147914381.897889\n        },\n        {\n            'level'     : 3,\n            'resolution': 19567.87924099992,\n            'scale'     : 73957190.948944\n        },\n        {\n            'level'     : 4,\n            'resolution': 9783.93962049996,\n            'scale'     : 36978595.474472\n        },\n        {\n            'level'     : 5,\n            'resolution': 4891.96981024998,\n            'scale'     : 18489297.737236\n        },\n        {\n            'level'     : 6,\n            'resolution': 2445.98490512499,\n            'scale'     : 9244648.868618\n        },\n        {\n            'level'     : 7,\n            'resolution': 1222.992452562495,\n            'scale'     : 4622324.434309\n        },\n        {\n            'level'     : 8,\n            'resolution': 611.4962262813797,\n            'scale'     : 2311162.217155\n        },\n        {\n            'level'     : 9,\n            'resolution': 305.74811314055756,\n            'scale'     : 1155581.108577\n        },\n        {\n            'level'     : 10,\n            'resolution': 152.87405657041106,\n            'scale'     : 577790.554289\n        },\n        {\n            'level'     : 11,\n            'resolution': 76.43702828507324,\n            'scale'     : 288895.277144\n        },\n        {\n            'level'     : 12,\n            'resolution': 38.21851414253662,\n            'scale'     : 144447.638572\n        },\n        {\n            'level'     : 13,\n            'resolution': 19.10925707126831,\n            'scale'     : 72223.819286\n        },\n        {\n            'level'     : 14,\n            'resolution': 9.554628535634155,\n            'scale'     : 36111.909643\n        },\n        {\n            'level'     : 15,\n            'resolution': 4.77731426794937,\n            'scale'     : 18055.954822\n        },\n        {\n            'level'     : 16,\n            'resolution': 2.388657133974685,\n            'scale'     : 9027.977411\n        },\n        {\n            'level'     : 17,\n            'resolution': 1.1943285668550503,\n            'scale'     : 4513.988705\n        },\n        {\n            'level'     : 18,\n            'resolution': 0.5971642835598172,\n            'scale'     : 2256.994353\n        },\n        {\n            'level'     : 19,\n            'resolution': 0.29858214164761665,\n            'scale'     : 1128.497176\n        },\n        {\n            'level'     : 20,\n            'resolution': 0.14929107082380833,\n            'scale'     : 564.248588\n        },\n        {\n            'level'     : 21,\n            'resolution': 0.07464553541190416,\n            'scale'     : 282.124294\n        }\n    ]\n},",
            "title": "Manually setting the levels of detail (LODs)"
        },
        {
            "location": "/configure/mapOptions/#important-chrome-browser-tweak",
            "text": "If you notice or experience the map or the application flashing while zooming in   out, or panning here is a workaround.  In  config/viewer.js  under Map Options add  navigationMode: 'classic'  Example  mapOptions: {\n   navigationMode: 'classic',\n   center: [-84.138794, 39.055701],\n   zoom: 11,\n   sliderStyle: 'small',\n   showAttribution: true\n}  Here is a  link  to the ArcGIS Javascript API docs for a more detailed explanation.",
            "title": "Important Chrome Browser Tweak"
        },
        {
            "location": "/configure/operationalLayers/",
            "text": "Operational Layers Section of viewer.js\n\n\nLayers to load on top of the basemap. See \nClass: Layer\n for more information on types of layers and \nLayer options\n.\n\n\nEach layer object may consist of the following properties:\n\n\n\n\n\n\n\n\nProperty name\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntype\n\n\nstring\n\n\nCMV friendly \nLayer type\n\n\n\n\n\n\nurl\n\n\nstring\n\n\nUrl to layer resource\n\n\n\n\n\n\ntitle\n\n\nstring\n\n\nLayer title used by widgets\n\n\n\n\n\n\noptions\n\n\nobject\n\n\nLayer constructor options\n\n\n\n\n\n\neditorLayerInfos\n\n\nobject\n\n\nEditor widget options\n\n\n\n\n\n\nlegendLayerInfos\n\n\nobject\n\n\nLegend widget options\n\n\n\n\n\n\nidentifyLayerInfos\n\n\nobject\n\n\nIdentify widget options\n\n\n\n\n\n\nlayerControlLayerInfos\n\n\nobject\n\n\nLayer control options\n\n\n\n\n\n\n\n\nLayer types\n\n\nThe following list indicates tested and untested layers that can be used in CMV\n\n\n\n\n\n\n\n\nLayer Type\n\n\nArcGIS Layer Type\n\n\nTested\n\n\n\n\n\n\n\n\n\n\ncsv\n\n\nCSV\n\n\nx\n\n\n\n\n\n\ndynamic\n\n\nArcGISDynamicMapService\n\n\nx\n\n\n\n\n\n\ngeorss\n\n\nGeoRSS\n\n\nx\n\n\n\n\n\n\nimage\n\n\nArcGISImageService\n\n\nx\n\n\n\n\n\n\nkml\n\n\nKML\n\n\nx\n\n\n\n\n\n\nlabel\n\n\nLabel\n\n\n\n\n\n\n\n\nmapimage\n\n\nMapImage\n\n\n\n\n\n\n\n\nosm\n\n\nOpenStreetMap\n\n\nx\n\n\n\n\n\n\ntiled\n\n\nArcGISTiledMapService\n\n\nx\n\n\n\n\n\n\nwms\n\n\nWMS\n\n\nx\n\n\n\n\n\n\nwmts\n\n\nWMTS\n\n\n\n\n\n\n\n\n\n\nEditor\n\n\nSetting \nexclude: true\n in the \neditorLayerInfos\n property allows you to exclude the feature layer from the editor widget. Additional options that are found under the \nlayerInfo\n portion of the \neditor api docs\n may be provided in this object\n\n\nLegend\n\n\nSetting \nexclude: true\n in the \nlegendLayerInfos\n property allows you to exclude the feature layer from the editor widget. (Available in 1.4.0)\n\n\nIdentify\n\n\nSetting \nexclude: true\n in the \nidentifyLayerInfos\n property allows you to exclude the feature layer from the editor widget.\n\n\nLayer Control\n\n\nSee the \nlayer control documentation\n for details on configuring the layer in this widget.\n\n\nExample\n\n\nSee \noperational layers section in viewer.js\n for examples.\n\n\nFeature Layer Modes\n\n\nFeature layers have a default mode of \nON_DEMAND\n so a value is not required. But if you would like to change the mode, you don't have to import \nesri/layers/FeatureLayer\n, instead you can use the integer value of the mode instead.\n\n\n\n\n\n\n\n\nMode\n\n\nInteger value\n\n\n\n\n\n\n\n\n\n\nMODE_SNAPSHOT\n\n\n0\n\n\n\n\n\n\nMODE_ONDEMAND\n\n\n1\n\n\n\n\n\n\nMODE_SELECTION\n\n\n2",
            "title": "Operational Layers"
        },
        {
            "location": "/configure/operationalLayers/#operational-layers-section-of-viewerjs",
            "text": "Layers to load on top of the basemap. See  Class: Layer  for more information on types of layers and  Layer options .  Each layer object may consist of the following properties:     Property name  Type  Description      type  string  CMV friendly  Layer type    url  string  Url to layer resource    title  string  Layer title used by widgets    options  object  Layer constructor options    editorLayerInfos  object  Editor widget options    legendLayerInfos  object  Legend widget options    identifyLayerInfos  object  Identify widget options    layerControlLayerInfos  object  Layer control options",
            "title": "Operational Layers Section of viewer.js"
        },
        {
            "location": "/configure/operationalLayers/#layer-types",
            "text": "The following list indicates tested and untested layers that can be used in CMV     Layer Type  ArcGIS Layer Type  Tested      csv  CSV  x    dynamic  ArcGISDynamicMapService  x    georss  GeoRSS  x    image  ArcGISImageService  x    kml  KML  x    label  Label     mapimage  MapImage     osm  OpenStreetMap  x    tiled  ArcGISTiledMapService  x    wms  WMS  x    wmts  WMTS",
            "title": "Layer types"
        },
        {
            "location": "/configure/operationalLayers/#editor",
            "text": "Setting  exclude: true  in the  editorLayerInfos  property allows you to exclude the feature layer from the editor widget. Additional options that are found under the  layerInfo  portion of the  editor api docs  may be provided in this object",
            "title": "Editor"
        },
        {
            "location": "/configure/operationalLayers/#legend",
            "text": "Setting  exclude: true  in the  legendLayerInfos  property allows you to exclude the feature layer from the editor widget. (Available in 1.4.0)",
            "title": "Legend"
        },
        {
            "location": "/configure/operationalLayers/#identify",
            "text": "Setting  exclude: true  in the  identifyLayerInfos  property allows you to exclude the feature layer from the editor widget.",
            "title": "Identify"
        },
        {
            "location": "/configure/operationalLayers/#layer-control",
            "text": "See the  layer control documentation  for details on configuring the layer in this widget.",
            "title": "Layer Control"
        },
        {
            "location": "/configure/operationalLayers/#example",
            "text": "See  operational layers section in viewer.js  for examples.",
            "title": "Example"
        },
        {
            "location": "/configure/operationalLayers/#feature-layer-modes",
            "text": "Feature layers have a default mode of  ON_DEMAND  so a value is not required. But if you would like to change the mode, you don't have to import  esri/layers/FeatureLayer , instead you can use the integer value of the mode instead.     Mode  Integer value      MODE_SNAPSHOT  0    MODE_ONDEMAND  1    MODE_SELECTION  2",
            "title": "Feature Layer Modes"
        },
        {
            "location": "/configure/panes/",
            "text": "Panes Section of viewer.js\n\n\nBasic guide for placing widgets in panes\n\n\nFirst add a bottom pane. Something like this near the top of your \nviewer.js\n:\n\n\npanes: {\n    left: {\n        id: 'sidebarLeft',\n        placeAt: 'outer',\n        collapsible: true,\n        region: 'left'\n    },\n    bottom: {\n        id: 'sidebarBottom',\n        placeAt: 'outer',\n        splitter: true,\n        collapsible: true,\n        region: 'bottom'\n    }\n},\n\n\n\n\nThen place your widget there by using \nplaceAt\n in the widget options:\n\n\nwidget: {\n    ...\n    type: 'contentPane',\n    placeAt: 'bottom'\n}\n\n\n\n\nThat will work for widgets of type \ntitlePane\n and \ncontentPane\n. If you want to use a type of \ndomNode\n you need some content in your pane to attach to:\n\n\ncontent: '\ndiv id=\nmyWidgetContainer\n/div\n'\n\n\n\n\nThen include the reference to that domNode in the widget options:\n\n\nwidget: {\n    ...\n    type: 'domNode',\n    srcNodeRef: 'myWidgetContainer'\n}\n\n\n\n\nThere are some gotchas when using dijits like a TabContainer dijit. Here's a discussion about using a TabContainer that also touches on the widget placement in panes: \nGitub #214",
            "title": "Panes"
        },
        {
            "location": "/configure/panes/#panes-section-of-viewerjs",
            "text": "Basic guide for placing widgets in panes  First add a bottom pane. Something like this near the top of your  viewer.js :  panes: {\n    left: {\n        id: 'sidebarLeft',\n        placeAt: 'outer',\n        collapsible: true,\n        region: 'left'\n    },\n    bottom: {\n        id: 'sidebarBottom',\n        placeAt: 'outer',\n        splitter: true,\n        collapsible: true,\n        region: 'bottom'\n    }\n},  Then place your widget there by using  placeAt  in the widget options:  widget: {\n    ...\n    type: 'contentPane',\n    placeAt: 'bottom'\n}  That will work for widgets of type  titlePane  and  contentPane . If you want to use a type of  domNode  you need some content in your pane to attach to:  content: ' div id= myWidgetContainer /div '  Then include the reference to that domNode in the widget options:  widget: {\n    ...\n    type: 'domNode',\n    srcNodeRef: 'myWidgetContainer'\n}  There are some gotchas when using dijits like a TabContainer dijit. Here's a discussion about using a TabContainer that also touches on the widget placement in panes:  Gitub #214",
            "title": "Panes Section of viewer.js"
        },
        {
            "location": "/configure/titles/",
            "text": "Titles Section of viewer.js\n\n\nSet Page Title, Header and Subheader\n\n\nYou can override the default titles in your \nindex.html\n\n\ntitles: {\n    header: 'Yours',\n    subHeader: 'Mine!',\n    pageTitle: 'Ours'\n},",
            "title": "Titles"
        },
        {
            "location": "/configure/titles/#titles-section-of-viewerjs",
            "text": "",
            "title": "Titles Section of viewer.js"
        },
        {
            "location": "/configure/titles/#set-page-title-header-and-subheader",
            "text": "You can override the default titles in your  index.html  titles: {\n    header: 'Yours',\n    subHeader: 'Mine!',\n    pageTitle: 'Ours'\n},",
            "title": "Set Page Title, Header and Subheader"
        },
        {
            "location": "/configure/widgets/",
            "text": "Widgets Section of viewer.js\n\n\nWidget Properties\n\n\n\n\n\n\n\n\nKey\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ninclude\n\n\nBoolean\n\n\nWhether or not to include this widget. The default is \nfalse\n\n\n\n\n\n\ntype\n\n\nString\n\n\nThe widget type. See \nWidget Types\n below\n\n\n\n\n\n\ncanFloat\n\n\nBoolean\n\n\nWhether or not to display a float arrow which when clicked allows the widget to be dragged around the cmv app\n\n\n\n\n\n\nplaceAt\n\n\nString\n\n\nThe pane to place the widget. The default is \n'left'\n\n\n\n\n\n\npath\n\n\nString\n\n\nThe path to the widget. For cmv widgets, this is typically \n'gis/dijit/Widgetname'\n. Other widget paths can be configured using \ndojoConfig\n\n\n\n\n\n\nid\n\n\nString\n\n\nA unique identifier used to create a unique dom node for this widget. If not provided, the object key is used\n\n\n\n\n\n\ntitle\n\n\nString\n\n\nThe title to display for \n'titlePane'\n type widgets\n\n\n\n\n\n\niconClass\n\n\nString\n\n\nThe font awesome icon class to use in \ntitlePane\n type widgets. Example: \n'fa-picture-o'\n\n\n\n\n\n\nopen\n\n\nBoolean\n\n\nWhether or not this widget should be open by default. This is used for \n'titlePane'\n type widgets\n\n\n\n\n\n\nposition\n\n\nNumber\n\n\nA number representing the order to display widgets in the pane. The larger numbers will be placed towards the end, while \n0\n will be first\n\n\n\n\n\n\nsrcNodeRef\n\n\nString\n\n\nA string \"id\" for a dom node.Used for \n'domNode'\n type widgets.\n\n\n\n\n\n\noptions\n\n\nObject\n\n\nWidget options passed to the widget constructor. These options will override default properties and methods. See \nWidget Options\n below for details\n\n\n\n\n\n\n\n\nWidget Types\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n'titlePane'\n\n\nThe collapsible widget type with a title and optional floating capability\n\n\n\n\n\n\n'contentPane'\n\n\nAn content pane with no additional content or functionality. The widget will always be visible and not 'toggle-able'\n\n\n\n\n\n\n'floating'\n\n\nDisplays the widget in a floating type dialog when its \nshow\n method is called. Set this widgets option \nopen\n to \ntrue\n to show by default\n\n\n\n\n\n\n'domNode'\n\n\nPlace this widget in a specific dom node by id. To use this type, \nsrcNodeRef\n must be included\n\n\n\n\n\n\n'invisible'\n\n\nUsed for widgets that don't have a UI, but instead perform background functions like modifying the map\n\n\n\n\n\n\n'map'\n\n\nWidgets that load after the map is loaded\n\n\n\n\n\n\n'layer'\n\n\nWidgets that load after the layers are loaded\n\n\n\n\n\n\n'layout'\n\n\nWidgets that load after the layout (panes) has completed but before the map is loaded\n\n\n\n\n\n\n'loading'\n\n\nWidgets that load as soon as possible\n\n\n\n\n\n\n\n\nWidget Options\n\n\nCMV has several built in widget options. In addition each widget can generally accept several options as well, these properties are documented in each widget's documentation.\n\n\nThe builtin properties are listed below. These properties are all boolean flags that tell the CMV widget loader to pass the object to the widget. For example, setting \nmap: true\n in the widgets options will pass the cmv map object to the widget using the key \nmap\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmap\n\n\nPass the main map object to the widget\n\n\n\n\n\n\nmapRightClickMenu\n\n\nPass a menu object to the widget that allows the widget to modify the maps right click menu by adding new options\n\n\n\n\n\n\nmapClickMode\n\n\nPass the current map click mode to the widget. This allows widgets to \"share\" the map click by ensuring not all widgets are active when the map is clicked. For example, you wouldn't want to identify features when you are drawing\n\n\n\n\n\n\nlegendLayerInfos\n\n\nPass the array of legend layer infos to the widget. This is a custom array built inside cmv that is generally only used for the Esri legend widget\n\n\n\n\n\n\nlayerControlLayerInfos\n\n\nPass the layer control structured layers to the widget. This is often used by the layer control as well as custom widgets that require access to the layers\n\n\n\n\n\n\nidentifyLayerInfos\n\n\nPass the identify structured layers to the widget. This is generally only used by the identify widget\n\n\n\n\n\n\n\n\nAdditionally, some properties are passed by cmv automatically. These properties can be accessed by custom and cmv widgets.\n\n\n\n\n\n\n\n\nKey\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nparentWidget\n\n\nObject\n\n\nThe parent widget object, for example in title pane widget types, the parent widget will be the \ndijit/layout/TitlePane\n object\n\n\n\n\n\n\n\n\nExample Widget Config\n\n\n{\n    //load this widget definition\n    include: true,\n\n    //can be: floating, titlePane, contentPane, map, domNode, invisible\n    type: 'titlePane',\n       // titlePane type can undock from sidebar allowing user to position widget within browser\n        canFloat: true\n\n       //if titlePane type, additional pane locations are available: top, right, bottom\n       //uncomment panes:{} section\n       placeAt: 'right'\n\n    //class file path to the widget\n    path: 'gis/dijit/Print',\n\n    //id for widget must be unique\n    id: 'print',\n\n    //title for widget, will be used in titlePane and floating\n    title: 'Print',\n\n    //if titlePane, will be open or closed by default\n    open: false,\n\n    //if titlePane type, the order in the sidebar when application is first opened\n    position: 5,\n\n    //the dom node id to place the widget in for type domNode\n    srcNodeRef: 'nodeId',\n\n    //options object will be passed into the widget class on creation\n    options: {\n\n        //if you need a map reference true, if not false\n        map: true,\n\n        // if you need the map click mode object\n        mapClickMode: true,\n\n        // if you need the legend layer array\n        legendLayerInfos: true,\n\n        // if you need the toc layer array\n        tocLayerInfos: true,\n\n        // if you need the edit layer array\n        editorLayerInfos: true,\n\n        // any other property:value to pass into widget that you may need\n        property: 'value'\n    }\n}\n\n\n\n\nCore Widgets\n\n\nThe documentation for core CMV widgets is located \nhere\n.",
            "title": "Widgets"
        },
        {
            "location": "/configure/widgets/#widgets-section-of-viewerjs",
            "text": "",
            "title": "Widgets Section of viewer.js"
        },
        {
            "location": "/configure/widgets/#widget-properties",
            "text": "Key  Type  Description      include  Boolean  Whether or not to include this widget. The default is  false    type  String  The widget type. See  Widget Types  below    canFloat  Boolean  Whether or not to display a float arrow which when clicked allows the widget to be dragged around the cmv app    placeAt  String  The pane to place the widget. The default is  'left'    path  String  The path to the widget. For cmv widgets, this is typically  'gis/dijit/Widgetname' . Other widget paths can be configured using  dojoConfig    id  String  A unique identifier used to create a unique dom node for this widget. If not provided, the object key is used    title  String  The title to display for  'titlePane'  type widgets    iconClass  String  The font awesome icon class to use in  titlePane  type widgets. Example:  'fa-picture-o'    open  Boolean  Whether or not this widget should be open by default. This is used for  'titlePane'  type widgets    position  Number  A number representing the order to display widgets in the pane. The larger numbers will be placed towards the end, while  0  will be first    srcNodeRef  String  A string \"id\" for a dom node.Used for  'domNode'  type widgets.    options  Object  Widget options passed to the widget constructor. These options will override default properties and methods. See  Widget Options  below for details",
            "title": "Widget Properties"
        },
        {
            "location": "/configure/widgets/#widget-types",
            "text": "Type  Description      'titlePane'  The collapsible widget type with a title and optional floating capability    'contentPane'  An content pane with no additional content or functionality. The widget will always be visible and not 'toggle-able'    'floating'  Displays the widget in a floating type dialog when its  show  method is called. Set this widgets option  open  to  true  to show by default    'domNode'  Place this widget in a specific dom node by id. To use this type,  srcNodeRef  must be included    'invisible'  Used for widgets that don't have a UI, but instead perform background functions like modifying the map    'map'  Widgets that load after the map is loaded    'layer'  Widgets that load after the layers are loaded    'layout'  Widgets that load after the layout (panes) has completed but before the map is loaded    'loading'  Widgets that load as soon as possible",
            "title": "Widget Types"
        },
        {
            "location": "/configure/widgets/#widget-options",
            "text": "CMV has several built in widget options. In addition each widget can generally accept several options as well, these properties are documented in each widget's documentation.  The builtin properties are listed below. These properties are all boolean flags that tell the CMV widget loader to pass the object to the widget. For example, setting  map: true  in the widgets options will pass the cmv map object to the widget using the key  map     Key  Description      map  Pass the main map object to the widget    mapRightClickMenu  Pass a menu object to the widget that allows the widget to modify the maps right click menu by adding new options    mapClickMode  Pass the current map click mode to the widget. This allows widgets to \"share\" the map click by ensuring not all widgets are active when the map is clicked. For example, you wouldn't want to identify features when you are drawing    legendLayerInfos  Pass the array of legend layer infos to the widget. This is a custom array built inside cmv that is generally only used for the Esri legend widget    layerControlLayerInfos  Pass the layer control structured layers to the widget. This is often used by the layer control as well as custom widgets that require access to the layers    identifyLayerInfos  Pass the identify structured layers to the widget. This is generally only used by the identify widget     Additionally, some properties are passed by cmv automatically. These properties can be accessed by custom and cmv widgets.     Key  Type  Description      parentWidget  Object  The parent widget object, for example in title pane widget types, the parent widget will be the  dijit/layout/TitlePane  object",
            "title": "Widget Options"
        },
        {
            "location": "/configure/widgets/#example-widget-config",
            "text": "{\n    //load this widget definition\n    include: true,\n\n    //can be: floating, titlePane, contentPane, map, domNode, invisible\n    type: 'titlePane',\n       // titlePane type can undock from sidebar allowing user to position widget within browser\n        canFloat: true\n\n       //if titlePane type, additional pane locations are available: top, right, bottom\n       //uncomment panes:{} section\n       placeAt: 'right'\n\n    //class file path to the widget\n    path: 'gis/dijit/Print',\n\n    //id for widget must be unique\n    id: 'print',\n\n    //title for widget, will be used in titlePane and floating\n    title: 'Print',\n\n    //if titlePane, will be open or closed by default\n    open: false,\n\n    //if titlePane type, the order in the sidebar when application is first opened\n    position: 5,\n\n    //the dom node id to place the widget in for type domNode\n    srcNodeRef: 'nodeId',\n\n    //options object will be passed into the widget class on creation\n    options: {\n\n        //if you need a map reference true, if not false\n        map: true,\n\n        // if you need the map click mode object\n        mapClickMode: true,\n\n        // if you need the legend layer array\n        legendLayerInfos: true,\n\n        // if you need the toc layer array\n        tocLayerInfos: true,\n\n        // if you need the edit layer array\n        editorLayerInfos: true,\n\n        // any other property:value to pass into widget that you may need\n        property: 'value'\n    }\n}",
            "title": "Example Widget Config"
        },
        {
            "location": "/configure/widgets/#core-widgets",
            "text": "The documentation for core CMV widgets is located  here .",
            "title": "Core Widgets"
        },
        {
            "location": "/widgets/",
            "text": "Core Widgets\n\n\nCMV comes with many \"core\" widgets including:\n\n\nBase Maps\n\n\nBookmarks\n\n\nDirections\n\n\nDraw\n\n\nEditor\n\n\nFind\n\n\nGeocoder\n\n\nGrowler\n\n\nHelp\n\n\nHome Button\n\n\nIdentify\n\n\nLayer Control (Table of Contents)\n\n\nLegend\n\n\nLocate Button (Geolocation)\n\n\nMapInfo\n\n\nMeasurement\n\n\nOverview Map\n\n\nPrint\n\n\nScalebar\n\n\nStreetView\n\n\nContributed Widgets\n\n\nMany developers and users of CMV have created their own custom widgets. Some of these are made available through the \nCMV Contributed Widgets repo",
            "title": "Introduction"
        },
        {
            "location": "/widgets/#core-widgets",
            "text": "CMV comes with many \"core\" widgets including:",
            "title": "Core Widgets"
        },
        {
            "location": "/widgets/#base-maps",
            "text": "",
            "title": "Base Maps"
        },
        {
            "location": "/widgets/#bookmarks",
            "text": "",
            "title": "Bookmarks"
        },
        {
            "location": "/widgets/#directions",
            "text": "",
            "title": "Directions"
        },
        {
            "location": "/widgets/#draw",
            "text": "",
            "title": "Draw"
        },
        {
            "location": "/widgets/#editor",
            "text": "",
            "title": "Editor"
        },
        {
            "location": "/widgets/#find",
            "text": "",
            "title": "Find"
        },
        {
            "location": "/widgets/#geocoder",
            "text": "",
            "title": "Geocoder"
        },
        {
            "location": "/widgets/#growler",
            "text": "",
            "title": "Growler"
        },
        {
            "location": "/widgets/#help",
            "text": "",
            "title": "Help"
        },
        {
            "location": "/widgets/#home-button",
            "text": "",
            "title": "Home Button"
        },
        {
            "location": "/widgets/#identify",
            "text": "",
            "title": "Identify"
        },
        {
            "location": "/widgets/#layer-control-table-of-contents",
            "text": "",
            "title": "Layer Control (Table of Contents)"
        },
        {
            "location": "/widgets/#legend",
            "text": "",
            "title": "Legend"
        },
        {
            "location": "/widgets/#locate-button-geolocation",
            "text": "",
            "title": "Locate Button (Geolocation)"
        },
        {
            "location": "/widgets/#mapinfo",
            "text": "",
            "title": "MapInfo"
        },
        {
            "location": "/widgets/#measurement",
            "text": "",
            "title": "Measurement"
        },
        {
            "location": "/widgets/#overview-map",
            "text": "",
            "title": "Overview Map"
        },
        {
            "location": "/widgets/#print",
            "text": "",
            "title": "Print"
        },
        {
            "location": "/widgets/#scalebar",
            "text": "",
            "title": "Scalebar"
        },
        {
            "location": "/widgets/#streetview",
            "text": "",
            "title": "StreetView"
        },
        {
            "location": "/widgets/#contributed-widgets",
            "text": "Many developers and users of CMV have created their own custom widgets. Some of these are made available through the  CMV Contributed Widgets repo",
            "title": "Contributed Widgets"
        },
        {
            "location": "/widgets/Basemaps/",
            "text": "Basemaps\n\n\nThis file comes with the standard ESRI basemaps already configured to work with the application. Should you want to use your own custom basemaps or mash them up with ESRI basemaps there are a couple of ways to do this.\n\n\nWhat Options Are Available?\n\n\n\n\n\n\nIn an effort to not duplicate documentation it is strongly recommended you become familiar with the ArcGIS API for Javascript.\n\n\n\n\n\n\nTo understand the different parameters or options available to you.\n\n\n\n\n\n\na) For further customizing your Basemap please refer to  the \nArcGIS API for Javascript -- Basemap\n.\n\n\nb) For further customizing your BasemapLayer please refer to the \nArcGIS API for Javascript -- BasemapLayer\n.\n\n\nGetting Started with custom basemaps\n\n\n\n\n\n\nIn the file \n\\viewer\\js\\config\\basemaps.js\n change \nmode: 'agol',\n to \nmode: 'custom',\n\n\n\n\n\n\nBlock Comment the preconfigured AGOL basemaps so you can use your custom basemaps.\n\n\n\n\n\n\n/*streets: {\n      title: 'Streets'\n  },\n  satellite: {\n      title: 'Satellite'\n  },\n  hybrid: {\n      title: 'Hybrid'\n  },\n  topo: {\n      title: 'Topo'\n  },\n  gray: {\n      title: 'Gray'\n  },\n  oceans: {\n      title: 'Oceans'\n  },\n  'national-geographic': {\n      title: 'Nat Geo'\n  },\n  osm: {\n      title: 'Open Street Map'\n  }\n*/\n\n\n\n\n\n\nIt is recommended when getting started to not delete code right away. By commenting the code you have something you can refer back to.\n\n\n\n\nImplementing your custom basemaps\n\n\n\n\nRemove the Block Comment in the example section of \n\\viewer\\js\\config\\basemaps.js\n for custom basemaps.\n\n\n\n\n// examples of custom basemaps\n\n            streets: {\n\n\n                title: 'Streets',\n                basemap: new Basemap({\n                    id: 'streets',\n                    layers: [new BasemapLayer({\n                        url: 'http://services.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer'\n                    })]\n                })\n            },\n            satellite: {\n                title: 'Satellite',\n                basemap: new Basemap({\n                    id: 'satellite',\n                    layers: [new BasemapLayer({\n                        url: 'http://services.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer'\n                    })]\n                })\n            },\n            hybrid: {\n                title: 'Hybrid',\n                basemap: new Basemap({\n                    id: 'hybrid',\n                    layers: [new BasemapLayer({\n                        url: 'http://services.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer'\n                    }), new BasemapLayer({\n                        url: 'http://services.arcgisonline.com/ArcGIS/rest/services/Reference/World_Boundaries_and_Places/MapServer',\n                        isReference: true,\n                        displayLevels: [0, 1, 2, 3, 4, 5, 6, 7]\n                    }), new BasemapLayer({\n                        url: 'http://services.arcgisonline.com/ArcGIS/rest/services/Reference/World_Transportation/MapServer',\n                        isReference: true,\n                        displayLevels: [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]\n                    })]\n                })\n            },\n            lightGray: {\n                title: 'Light Gray Canvas',\n                basemap: new Basemap({\n                    id: 'lightGray',\n                    layers: [new BasemapLayer({\n                        url: 'http://services.arcgisonline.com/ArcGIS/rest/services/Canvas/World_Light_Gray_Base/MapServer'\n                    }), new BasemapLayer({\n                        url: 'http://services.arcgisonline.com/ArcGIS/rest/services/Canvas/World_Light_Gray_Reference/MapServer',\n                        isReference: true\n                    })]\n                })\n            }\n\n\n\n\n\n\nReplace \ntitle:\n and \nid:\n and \nurl:\n as necessary to match the custom basemaps array you want to display.\n a) Special note about the basemap function name - Notice this name matches a string in the \nbasemapToShow:[]\n. This is important because the name given to the function must correspond to a name in the array. For example;\n\n\n\n\nstreets: {\n    title: 'Streets',\n    basemap: new Basemap({\n        id: 'streets',\n        layers: [new BasemapLayer({\n            url: 'http://services.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer'\n        })]\n    })\n},\n\n\n\n\nNote:\n If you were to change the function name from \nstreets:{}\n to \nstreetscustom:{}\n then you would also need to add or change the name in the \nbasemapsToShow:[]\n array to match the name of your function. An example of how this might be done is below.\n\n\nExample configuration to use custom basemaps displayed in the Basemap Gallery\n\n\n// at CMV version 1.3.0 the three defines below are included and commented out.\n// uncomment each define to use custom basemaps\n// at CMV v1.2.0 you will need to add the following in define([], and in function()\ndefine([\n    'esri/dijit/Basemap',\n    'esri/dijit/BasemapLayer',\n    'esri/layers/osm'\n], function (Basemap, BasemapLayer, osm) {\n    return {\n        map: true,\n        mode: 'custom', //must be either 'agol' or 'custom'\n        title: 'Basemaps',\n        // use this as the start basemap when application first opens\n        mapStartBasemap: 'BaseMap1',\n        //this is the list of basemaps to show in the BaseMap Gallery.\n        basemapsToShow: ['BaseMap1', 'BaseMap2','BaseMap3'],  \n        basemaps: {\n            BaseMap1: {\n                title: 'My First Basemap', //appears as basemap title in Gallery\n                basemap: new Basemap({\n                    id: 'basemap1',\n                    layers: [new BasemapLayer({\n                        url: 'http://ServerName/arcgis/rest/services/BaseMapName/MapServer'\n                    })]\n                })\n            },\n            BaseMap2: {\n                title: 'My Second Basemap', //appears as basemap title in Gallery\n                basemap: new Basemap({\n                    id: 'basemap2',\n                    layers: [new BasemapLayer({\n                        url: 'http://ServerName/arcgis/rest/services/BaseMapName/MapServer'\n                    })]\n                })\n            },\n            BaseMap3: {\n                title: 'My Third Basemap', //appears as basemap title in Gallery\n                basemap: new Basemap({\n                    id: 'basemap3',\n                    layers: [new BasemapLayer({\n                        url: 'http://ServerName/arcgis/rest/services/BaseMapName/MapServer'\n                    })]\n                })\n            }\n        }\n    };\n});\n\n\n\n\nAdvanced Topics\n\n\n\n\n\n\nThe first BasemapLayer added in a Basemap will define the scales or levels of detail.\n\n\n\n\n\n\nTo mashup multiple tiled services the scales or levels of detail from both services must be the same.\n\n\n\n\n\n\nIf your tiled services have scales or levels of detail that go in beyond the Esri scales, you can still take advantage of those scales but continue using Esri basemap services albeit with a little more customization.\n\n\n\n\n\n\nZooming in beyond Esri default scales or levels of detail.\n\n\nThis can also be accomplished without an additional map service by editing your mapOptions object.  See the \nmapOptions config page\n for more details.\n\n\n\n\n\n\nCreate a map service and enable caching using your scales, but choose the option to generate tiles manually.\n\n\n\n\n\n\nThis will publish a service with your scales or levels of detail. While it appears like a cache service     there was no time spent creating the tiles. It is merely being used to define your scales or levels of detail.\n\n\n\n\n\n\nIn this example, the service defining scales or levels of detail is called \nLODS\n. Notice it is the first service defined in Basemap as a BasemapLayer. Therefore the streets Basemap should assume the scales or levels of detail of the \nLODS\n service. Although we still need to make some other customizations.\n\n\n\n\n\n\n\n//basemaps.js\n streets: {\n    title: 'Clermont County Streets',\n    basemap: new Basemap({\n        id: 'streets',\n        layers: [new BasemapLayer({\n            url: 'http://maps.clermontauditor.org/arcgis/rest/services/WMAS/LODS/MapServer'\n        }), new BasemapLayer({\n            url: 'http://services.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer'\n        }), new BasemapLayer({\n            url: 'http://maps.clermontauditor.org/arcgis/rest/services/WMAS/Streetmap/MapServer'\n        })]\n    })\n},\n\n\n\n\n\n\n\n\nBy design the template is built to work with Esri basemaps. So the first basemap which gets loaded in the \nviewer.js\n file is \nstreets\n. So even if you follow the above steps in \nbasemaps.js\n the scales will not be honored until some customizations are made to \nviewer.js\n.\n\n\n\n\n\n\nAround line 23 look for the block of code below. This is what you will need to customize so your scales or levels of detail will be honored when the application loads.\n\n\n\n\n\n\n// viewer.js\n\nmapOptions: {\n    basemap: 'streets',\n    center: [-96.59179687497497, 39.09596293629694],\n    zoom: 5,\n    sliderStyle: 'small'\n},\n\n\n\n\n\n\n\n\nYou will need to create a Basemap and add a BasemapLayer which references your scales.\n\n\n\n\n\n\nYou must define or add 2 references for this example \n'esri/dijit/Basemap'\n \n \n'esri/dijit/BasemapLayer'\n\n\n\n\n\n\nYour define statement might look like the code below, around line 7 \nviewer.js\n\n\n\n\n\n\ndefine(['esri/InfoTemplate',\n        'esri/units',\n        'esri/geometry/Extent',\n        'esri/config',\n        'esri/tasks/GeometryService',\n        'esri/dijit/Basemap',\n        'esri/dijit/BasemapLayer'],\n\n\n\n\n\n\nNext add references in your function, around line 14 \nviewer.js\n\n\n\n\nfunction (a, b, c, d, e, Basemap, BasemapLayer) {\n\n\n\n\n\n\nNext create your basemap as shown below, around line 18 \nviewer.js\n\n\n\n\n mapOptions: {\n                    basemap: new Basemap({\n                        layers: [new BasemapLayer({\n                            url: 'http://maps.clermontauditor.org/arcgis/rest/services/WMAS/LODS/MapServer'\n                        })]\n                    }),\n                    center: [-84.138794, 39.055701],\n                    zoom: 11,\n                    sliderStyle: 'small'\n                },\n\n\n\n\n\n\n\n\nThe above code will ensure the application assumes your scales or level of detail when it loads.\n\n\n\n\n\n\nYou might notice the map looks blank when the application initially loads because the service being loaded  was an empty cache. Once the application assumes the scales it will then load your custom basemaps.",
            "title": "BaseMaps"
        },
        {
            "location": "/widgets/Basemaps/#basemaps",
            "text": "This file comes with the standard ESRI basemaps already configured to work with the application. Should you want to use your own custom basemaps or mash them up with ESRI basemaps there are a couple of ways to do this.",
            "title": "Basemaps"
        },
        {
            "location": "/widgets/Basemaps/#what-options-are-available",
            "text": "In an effort to not duplicate documentation it is strongly recommended you become familiar with the ArcGIS API for Javascript.    To understand the different parameters or options available to you.    a) For further customizing your Basemap please refer to  the  ArcGIS API for Javascript -- Basemap .  b) For further customizing your BasemapLayer please refer to the  ArcGIS API for Javascript -- BasemapLayer .",
            "title": "What Options Are Available?"
        },
        {
            "location": "/widgets/Basemaps/#getting-started-with-custom-basemaps",
            "text": "In the file  \\viewer\\js\\config\\basemaps.js  change  mode: 'agol',  to  mode: 'custom',    Block Comment the preconfigured AGOL basemaps so you can use your custom basemaps.    /*streets: {\n      title: 'Streets'\n  },\n  satellite: {\n      title: 'Satellite'\n  },\n  hybrid: {\n      title: 'Hybrid'\n  },\n  topo: {\n      title: 'Topo'\n  },\n  gray: {\n      title: 'Gray'\n  },\n  oceans: {\n      title: 'Oceans'\n  },\n  'national-geographic': {\n      title: 'Nat Geo'\n  },\n  osm: {\n      title: 'Open Street Map'\n  }\n*/   It is recommended when getting started to not delete code right away. By commenting the code you have something you can refer back to.",
            "title": "Getting Started with custom basemaps"
        },
        {
            "location": "/widgets/Basemaps/#implementing-your-custom-basemaps",
            "text": "Remove the Block Comment in the example section of  \\viewer\\js\\config\\basemaps.js  for custom basemaps.   // examples of custom basemaps\n\n            streets: {\n\n\n                title: 'Streets',\n                basemap: new Basemap({\n                    id: 'streets',\n                    layers: [new BasemapLayer({\n                        url: 'http://services.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer'\n                    })]\n                })\n            },\n            satellite: {\n                title: 'Satellite',\n                basemap: new Basemap({\n                    id: 'satellite',\n                    layers: [new BasemapLayer({\n                        url: 'http://services.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer'\n                    })]\n                })\n            },\n            hybrid: {\n                title: 'Hybrid',\n                basemap: new Basemap({\n                    id: 'hybrid',\n                    layers: [new BasemapLayer({\n                        url: 'http://services.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer'\n                    }), new BasemapLayer({\n                        url: 'http://services.arcgisonline.com/ArcGIS/rest/services/Reference/World_Boundaries_and_Places/MapServer',\n                        isReference: true,\n                        displayLevels: [0, 1, 2, 3, 4, 5, 6, 7]\n                    }), new BasemapLayer({\n                        url: 'http://services.arcgisonline.com/ArcGIS/rest/services/Reference/World_Transportation/MapServer',\n                        isReference: true,\n                        displayLevels: [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]\n                    })]\n                })\n            },\n            lightGray: {\n                title: 'Light Gray Canvas',\n                basemap: new Basemap({\n                    id: 'lightGray',\n                    layers: [new BasemapLayer({\n                        url: 'http://services.arcgisonline.com/ArcGIS/rest/services/Canvas/World_Light_Gray_Base/MapServer'\n                    }), new BasemapLayer({\n                        url: 'http://services.arcgisonline.com/ArcGIS/rest/services/Canvas/World_Light_Gray_Reference/MapServer',\n                        isReference: true\n                    })]\n                })\n            }   Replace  title:  and  id:  and  url:  as necessary to match the custom basemaps array you want to display.\n a) Special note about the basemap function name - Notice this name matches a string in the  basemapToShow:[] . This is important because the name given to the function must correspond to a name in the array. For example;   streets: {\n    title: 'Streets',\n    basemap: new Basemap({\n        id: 'streets',\n        layers: [new BasemapLayer({\n            url: 'http://services.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer'\n        })]\n    })\n},  Note:  If you were to change the function name from  streets:{}  to  streetscustom:{}  then you would also need to add or change the name in the  basemapsToShow:[]  array to match the name of your function. An example of how this might be done is below.",
            "title": "Implementing your custom basemaps"
        },
        {
            "location": "/widgets/Basemaps/#example-configuration-to-use-custom-basemaps-displayed-in-the-basemap-gallery",
            "text": "// at CMV version 1.3.0 the three defines below are included and commented out.\n// uncomment each define to use custom basemaps\n// at CMV v1.2.0 you will need to add the following in define([], and in function()\ndefine([\n    'esri/dijit/Basemap',\n    'esri/dijit/BasemapLayer',\n    'esri/layers/osm'\n], function (Basemap, BasemapLayer, osm) {\n    return {\n        map: true,\n        mode: 'custom', //must be either 'agol' or 'custom'\n        title: 'Basemaps',\n        // use this as the start basemap when application first opens\n        mapStartBasemap: 'BaseMap1',\n        //this is the list of basemaps to show in the BaseMap Gallery.\n        basemapsToShow: ['BaseMap1', 'BaseMap2','BaseMap3'],  \n        basemaps: {\n            BaseMap1: {\n                title: 'My First Basemap', //appears as basemap title in Gallery\n                basemap: new Basemap({\n                    id: 'basemap1',\n                    layers: [new BasemapLayer({\n                        url: 'http://ServerName/arcgis/rest/services/BaseMapName/MapServer'\n                    })]\n                })\n            },\n            BaseMap2: {\n                title: 'My Second Basemap', //appears as basemap title in Gallery\n                basemap: new Basemap({\n                    id: 'basemap2',\n                    layers: [new BasemapLayer({\n                        url: 'http://ServerName/arcgis/rest/services/BaseMapName/MapServer'\n                    })]\n                })\n            },\n            BaseMap3: {\n                title: 'My Third Basemap', //appears as basemap title in Gallery\n                basemap: new Basemap({\n                    id: 'basemap3',\n                    layers: [new BasemapLayer({\n                        url: 'http://ServerName/arcgis/rest/services/BaseMapName/MapServer'\n                    })]\n                })\n            }\n        }\n    };\n});",
            "title": "Example configuration to use custom basemaps displayed in the Basemap Gallery"
        },
        {
            "location": "/widgets/Basemaps/#advanced-topics",
            "text": "The first BasemapLayer added in a Basemap will define the scales or levels of detail.    To mashup multiple tiled services the scales or levels of detail from both services must be the same.    If your tiled services have scales or levels of detail that go in beyond the Esri scales, you can still take advantage of those scales but continue using Esri basemap services albeit with a little more customization.",
            "title": "Advanced Topics"
        },
        {
            "location": "/widgets/Basemaps/#zooming-in-beyond-esri-default-scales-or-levels-of-detail",
            "text": "This can also be accomplished without an additional map service by editing your mapOptions object.  See the  mapOptions config page  for more details.    Create a map service and enable caching using your scales, but choose the option to generate tiles manually.    This will publish a service with your scales or levels of detail. While it appears like a cache service     there was no time spent creating the tiles. It is merely being used to define your scales or levels of detail.    In this example, the service defining scales or levels of detail is called  LODS . Notice it is the first service defined in Basemap as a BasemapLayer. Therefore the streets Basemap should assume the scales or levels of detail of the  LODS  service. Although we still need to make some other customizations.    \n//basemaps.js\n streets: {\n    title: 'Clermont County Streets',\n    basemap: new Basemap({\n        id: 'streets',\n        layers: [new BasemapLayer({\n            url: 'http://maps.clermontauditor.org/arcgis/rest/services/WMAS/LODS/MapServer'\n        }), new BasemapLayer({\n            url: 'http://services.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer'\n        }), new BasemapLayer({\n            url: 'http://maps.clermontauditor.org/arcgis/rest/services/WMAS/Streetmap/MapServer'\n        })]\n    })\n},    By design the template is built to work with Esri basemaps. So the first basemap which gets loaded in the  viewer.js  file is  streets . So even if you follow the above steps in  basemaps.js  the scales will not be honored until some customizations are made to  viewer.js .    Around line 23 look for the block of code below. This is what you will need to customize so your scales or levels of detail will be honored when the application loads.    // viewer.js\n\nmapOptions: {\n    basemap: 'streets',\n    center: [-96.59179687497497, 39.09596293629694],\n    zoom: 5,\n    sliderStyle: 'small'\n},    You will need to create a Basemap and add a BasemapLayer which references your scales.    You must define or add 2 references for this example  'esri/dijit/Basemap'     'esri/dijit/BasemapLayer'    Your define statement might look like the code below, around line 7  viewer.js    define(['esri/InfoTemplate',\n        'esri/units',\n        'esri/geometry/Extent',\n        'esri/config',\n        'esri/tasks/GeometryService',\n        'esri/dijit/Basemap',\n        'esri/dijit/BasemapLayer'],   Next add references in your function, around line 14  viewer.js   function (a, b, c, d, e, Basemap, BasemapLayer) {   Next create your basemap as shown below, around line 18  viewer.js    mapOptions: {\n                    basemap: new Basemap({\n                        layers: [new BasemapLayer({\n                            url: 'http://maps.clermontauditor.org/arcgis/rest/services/WMAS/LODS/MapServer'\n                        })]\n                    }),\n                    center: [-84.138794, 39.055701],\n                    zoom: 11,\n                    sliderStyle: 'small'\n                },    The above code will ensure the application assumes your scales or level of detail when it loads.    You might notice the map looks blank when the application initially loads because the service being loaded  was an empty cache. Once the application assumes the scales it will then load your custom basemaps.",
            "title": "Zooming in beyond Esri default scales or levels of detail."
        },
        {
            "location": "/widgets/Bookmarks/",
            "text": "Bookmarks\n\n\nA Bookmark represents individual spatial locations of a geographic area. You can use bookmarks to highlight areas on your map you want the user to quickly see. A predefined list of bookmarks can appear in the widget or you may allow the user to add their own bookmarks. Modify \n\\config\\bookmark.js\n to create a predefined list for the user. In 'config\\viewer.js' you can choose to display the widget as well set the option to allow the user to edit bookmarks.\n\n\nYou can use David Spriggs' \nJS Extent Helper\n to obtain extents to modify the \nviewer\\js\\config\\bookmarks.js\n file. You can add default bookmarks as you wish for the end user to utilize when the app loads. Also, you can allow the end user to edit the bookmarks as well. To allow the end user to modify the bookmarks set \neditable:\n to true. \n\n\nExample Configuration File\n\n\ndefine({\n    map: true,\n    editable: true,\n    bookmarks: [\n        {\n            name: 'Alachua',\n            extent: {\n                xmin: 2585305.000345871,\n                ymin: 266868.2628403753,\n                xmax: 2640795.4403458685,\n                ymax: 311100.00284036994,\n                spatialReference: {\n                    wkid: 102660\n                }\n            }\n        },\n        {\n            name: 'Archer',\n            extent: {\n                xmin: 2586339.0203458667,\n                ymin: 193589.25284036994,\n                xmax: 2605705.230345875,\n                ymax: 211638.83284036815,\n                spatialReference: {\n                    wkid: 102660\n                }\n            }\n        },\n        {\n            name: 'Gainesville',\n            extent: {\n                xmin: 2628433.292845875,\n                ymin: 223701.73534037173,\n                xmax: 2691781.912845865,\n                ymax: 289218.2578403652,\n                spatialReference: {\n                    wkid: 102660\n                }\n            }\n        },\n        {\n            name: 'Hawthorne',\n            extent: {\n                xmin: 2728213.900345877,\n                ymin: 209241.0128403753,\n                xmax: 2745459.1903458685,\n                ymax: 233347.00284036994,\n                spatialReference: {\n                    wkid: 102660\n                }\n            }\n        },{\n            name: 'High Springs',\n            extent: {\n                xmin: 2556964.4703458697,\n                ymin: 276958.33284036815,\n                xmax: 2591340.980345875,\n                ymax: 317286.4528403729,\n                spatialReference: {\n                    wkid: 102660\n                }\n            }\n        },\n        {\n            name: 'Lacrosse',\n            extent: {\n                xmin: 2627223.6203458756,\n                ymin: 304157.0428403616,\n                xmax: 2651389.5403458774,\n                ymax: 318795.72284036875,\n                spatialReference: {\n                    wkid: 102660\n                }\n            }\n        },\n        {\n            name: 'Micanopy',\n            extent: {\n                xmin: 2671081.475345865,\n                ymin: 188239.75034037232,\n                xmax: 2678538.290970877,\n                ymax: 193685.25284036994,\n                spatialReference: {\n                    wkid: 102660\n                }\n            }\n        },{\n            name: 'Newberry',\n            extent: {\n                xmin: 2553863.030345872,\n                ymin: 199531.5128403753,\n                xmax: 2596468.000345871,\n                ymax: 274733.9928403646,\n                spatialReference: {\n                    wkid: 102660\n                }\n            }\n        },\n        {\n            name: 'Waldo',\n            extent: {\n                xmin: 2703015.000345871,\n                ymin: 290415.78284037113,\n                xmax: 2715093.350345865,\n                ymax: 305948.00284036994,\n                spatialReference: {\n                    wkid: 102660\n                }\n            }\n        }\n    ]\n});",
            "title": "Bookmarks"
        },
        {
            "location": "/widgets/Bookmarks/#bookmarks",
            "text": "A Bookmark represents individual spatial locations of a geographic area. You can use bookmarks to highlight areas on your map you want the user to quickly see. A predefined list of bookmarks can appear in the widget or you may allow the user to add their own bookmarks. Modify  \\config\\bookmark.js  to create a predefined list for the user. In 'config\\viewer.js' you can choose to display the widget as well set the option to allow the user to edit bookmarks.  You can use David Spriggs'  JS Extent Helper  to obtain extents to modify the  viewer\\js\\config\\bookmarks.js  file. You can add default bookmarks as you wish for the end user to utilize when the app loads. Also, you can allow the end user to edit the bookmarks as well. To allow the end user to modify the bookmarks set  editable:  to true.",
            "title": "Bookmarks"
        },
        {
            "location": "/widgets/Bookmarks/#example-configuration-file",
            "text": "define({\n    map: true,\n    editable: true,\n    bookmarks: [\n        {\n            name: 'Alachua',\n            extent: {\n                xmin: 2585305.000345871,\n                ymin: 266868.2628403753,\n                xmax: 2640795.4403458685,\n                ymax: 311100.00284036994,\n                spatialReference: {\n                    wkid: 102660\n                }\n            }\n        },\n        {\n            name: 'Archer',\n            extent: {\n                xmin: 2586339.0203458667,\n                ymin: 193589.25284036994,\n                xmax: 2605705.230345875,\n                ymax: 211638.83284036815,\n                spatialReference: {\n                    wkid: 102660\n                }\n            }\n        },\n        {\n            name: 'Gainesville',\n            extent: {\n                xmin: 2628433.292845875,\n                ymin: 223701.73534037173,\n                xmax: 2691781.912845865,\n                ymax: 289218.2578403652,\n                spatialReference: {\n                    wkid: 102660\n                }\n            }\n        },\n        {\n            name: 'Hawthorne',\n            extent: {\n                xmin: 2728213.900345877,\n                ymin: 209241.0128403753,\n                xmax: 2745459.1903458685,\n                ymax: 233347.00284036994,\n                spatialReference: {\n                    wkid: 102660\n                }\n            }\n        },{\n            name: 'High Springs',\n            extent: {\n                xmin: 2556964.4703458697,\n                ymin: 276958.33284036815,\n                xmax: 2591340.980345875,\n                ymax: 317286.4528403729,\n                spatialReference: {\n                    wkid: 102660\n                }\n            }\n        },\n        {\n            name: 'Lacrosse',\n            extent: {\n                xmin: 2627223.6203458756,\n                ymin: 304157.0428403616,\n                xmax: 2651389.5403458774,\n                ymax: 318795.72284036875,\n                spatialReference: {\n                    wkid: 102660\n                }\n            }\n        },\n        {\n            name: 'Micanopy',\n            extent: {\n                xmin: 2671081.475345865,\n                ymin: 188239.75034037232,\n                xmax: 2678538.290970877,\n                ymax: 193685.25284036994,\n                spatialReference: {\n                    wkid: 102660\n                }\n            }\n        },{\n            name: 'Newberry',\n            extent: {\n                xmin: 2553863.030345872,\n                ymin: 199531.5128403753,\n                xmax: 2596468.000345871,\n                ymax: 274733.9928403646,\n                spatialReference: {\n                    wkid: 102660\n                }\n            }\n        },\n        {\n            name: 'Waldo',\n            extent: {\n                xmin: 2703015.000345871,\n                ymin: 290415.78284037113,\n                xmax: 2715093.350345865,\n                ymax: 305948.00284036994,\n                spatialReference: {\n                    wkid: 102660\n                }\n            }\n        }\n    ]\n});",
            "title": "Example Configuration File"
        },
        {
            "location": "/widgets/Directions/",
            "text": "Directions\n\n\nOptimize order checkbox appears for end user after 4 or more stops are created\n\n\nExample Config Object\n\n\ndirections: {\n    include: true,\n    id: 'directions',\n    type: 'titlePane',\n    path: 'gis/dijit/Directions',\n    title: 'Directions',\n    open: false,\n    position: 7,\n    options: {\n        map: true,\n        options: {\n                        routeTaskUrl: http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Network/USA/NAServer/Route',\n            routeParams: {\n                directionsLanguage: 'en-US',\n                directionsLengthUnits: units.MILES\n            }\n        }\n    }\n},",
            "title": "Directions"
        },
        {
            "location": "/widgets/Directions/#directions",
            "text": "Optimize order checkbox appears for end user after 4 or more stops are created",
            "title": "Directions"
        },
        {
            "location": "/widgets/Directions/#example-config-object",
            "text": "directions: {\n    include: true,\n    id: 'directions',\n    type: 'titlePane',\n    path: 'gis/dijit/Directions',\n    title: 'Directions',\n    open: false,\n    position: 7,\n    options: {\n        map: true,\n        options: {\n                        routeTaskUrl: http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Network/USA/NAServer/Route',\n            routeParams: {\n                directionsLanguage: 'en-US',\n                directionsLengthUnits: units.MILES\n            }\n        }\n    }\n},",
            "title": "Example Config Object"
        },
        {
            "location": "/widgets/Draw/",
            "text": "Draw\n\n\nExample Config Object\n\n\ndraw: {\n    include: true,\n    id: 'draw',\n    type: 'titlePane',\n    path: 'gis/dijit/Draw',\n    title: 'Draw',\n    open: false,\n    position: 4,\n    options: {\n        map: true,\n        mapClickMode: true\n    }\n},",
            "title": "Draw"
        },
        {
            "location": "/widgets/Draw/#draw",
            "text": "",
            "title": "Draw"
        },
        {
            "location": "/widgets/Draw/#example-config-object",
            "text": "draw: {\n    include: true,\n    id: 'draw',\n    type: 'titlePane',\n    path: 'gis/dijit/Draw',\n    title: 'Draw',\n    open: false,\n    position: 4,\n    options: {\n        map: true,\n        mapClickMode: true\n    }\n},",
            "title": "Example Config Object"
        },
        {
            "location": "/widgets/Editor/",
            "text": "Editor\n\n\nA CMV friendly wrapper for the Esri editor widget. Accepts a \nsettings\n property which is described on the Esri Javascript API page for the \nEditor Widget\n.\n\n\nFeature layers are added by default to the editor widget. Feature layers with editing disabled will automatically be hidden.\n\n\nExample Config Object\n\n\neditor: {\n    include: true,\n    id: 'editor',\n    type: 'titlePane',\n    path: 'gis/dijit/Editor',\n    title: 'Editor',\n    open: false,\n    position: 8,\n    options: {\n        map: true,\n        mapClickMode: true,\n        editorLayerInfos: true,\n        settings: {\n            toolbarVisible: true,\n            showAttributesOnClick: true,\n            enableUndoRedo: true,\n            createOptions: {\n                polygonDrawTools: ['freehandpolygon', 'autocomplete']\n            },\n            toolbarOptions: {\n                reshapeVisible: true,\n                cutVisible: true,\n                mergeVisible: true\n            }\n        }\n    }\n},",
            "title": "Editor"
        },
        {
            "location": "/widgets/Editor/#editor",
            "text": "A CMV friendly wrapper for the Esri editor widget. Accepts a  settings  property which is described on the Esri Javascript API page for the  Editor Widget .  Feature layers are added by default to the editor widget. Feature layers with editing disabled will automatically be hidden.",
            "title": "Editor"
        },
        {
            "location": "/widgets/Editor/#example-config-object",
            "text": "editor: {\n    include: true,\n    id: 'editor',\n    type: 'titlePane',\n    path: 'gis/dijit/Editor',\n    title: 'Editor',\n    open: false,\n    position: 8,\n    options: {\n        map: true,\n        mapClickMode: true,\n        editorLayerInfos: true,\n        settings: {\n            toolbarVisible: true,\n            showAttributesOnClick: true,\n            enableUndoRedo: true,\n            createOptions: {\n                polygonDrawTools: ['freehandpolygon', 'autocomplete']\n            },\n            toolbarOptions: {\n                reshapeVisible: true,\n                cutVisible: true,\n                mergeVisible: true\n            }\n        }\n    }\n},",
            "title": "Example Config Object"
        },
        {
            "location": "/widgets/Find/",
            "text": "Find\n\n\nThe Find widget allows you to configure multiple searches against an ArcGiS map service.  These searches can be conducted on:\n\n\n\n\na single field of a single layer\n\n\nmany fields of a single layer\n\n\nor on many fields of many layers\n\n\n\n\nFeatures\n\n\n\n\nConfigurable columns for each query\n\n\nConfigurable sort for each query\n\n\nConfigurable prompt for each query\n\n\nConfigurable symbology, both the base symbology used to show each find result on the map as well as a different symbology for the selected find result(s)\n\n\nConfigurable zoom extent scale factor - this will be used to expand the extent when setting extent on the map.\n\n\nOptions for controlling FindTask's exact match option and how zoom is handled when selecting results in the result list.\n\n\n\n\nImportant concepts\n\n\nWhen configuring the various options, it's important to remember that the widget is based on the \nFindTask\n and all results will be a FindResult object.  A FindResult object will contain a \nfeature\n attribute which is a Graphic object.  This means it will have an \nattributes\n object with the properties of each result as specified by the layer in the base service.\n\n\nIt is important to recognize that the attribute names in this \nattributes\n property will be the field aliases specified for each field in the service definition and not the actual field name.\n\n\nIt is also important to understand that different layers in a map service can have very different attributes but the grid columns you specify apply to all layers included in the search.  It is therefore recommended to achieve best results that you either limit the layers included in each search to layers that have similar attributes \nor\n, limit the columns you specify to fields shared by all layers in a search.\n\n\nTips\n\n\nIf you can control the service, it may be useful to use common aliases for fields in different layers.  For example:\n\n\n\n\nPDNAME -\n Name\n\n\nFDNAME -\n Name\n\n\nRESNAME -\n Name\n\n\n\n\nYou can also use a \nget\n function (detailed below) to compute and store a value on each FindResult item in your results.  A get function will be invoked and passed the FindResult object.  You can test for different properties to format the returned string.\n\n\nSpecifying columns\n\n\nThere are two ways to specify columns.  Each has it's own benefits but follows the rules outlined in the \ndgrid documentation\n for specifying grid structures.\n\n\nUsing an the array approach gives more flexibility but the object form is a handy shortcut for simple configurations.\n\n\nAs an array of objects\n\n\nAdd a \ngridColumns\n property to the search object.  The value should be an array of objects with the following properties:\n\n\n\n\nfield\n: this is the field alias of the column to get the value from.\n\n\nget\n: this should be a function that accepts a find result item as the only argument and returns a string to display.\n\n\nlabel\n: The column heading\n\n\nresizable\n \n: whether or not the column can be resized\n\n\nvisible\n \n: set to false to compute and store a value on each FindResult item without displaying it in a column.  This is useful for sorting.\n\n\nwidth\n: initial width of the column\n\n\n\n\nAs an object\n\n\nThis is a handy shortcut for specifying column defininitons but is much less flexible.  Check the dgrid documentation for details.\n\n\nAnother way to specify a column is to use the get function.  Using this approach, the underlying dgrid instance will call the function you specify as the \nget\n property of a column object.  This function will receive the FindResult object and should return a string.  Check the Dgrid documentation for more information.\n\n\nYou can specify a visible property for each property.  Setting this to false is a useful way of computing and storing a property which can be specified as a attribute to sort on but will not be shown in the grid:\n\n\nGet Function\n\n\nThe get function can be used to compute and return a string to display in a column or use as a sort attribute.  The partial example below uses a get function to to create a column that is not displayed in the grid but is used to sort the results.\n\n\ngridColumns: [\n    { field: 'SORT_VAL', visible: false, get: function ( item ) {\n        return String( '0000' + item.feature.attributes.ASSET_NO ).slice( -4 );\n    } }\n],\nsort: [\n    {\n        attribute: 'SORT_VAL',\n        descending: false\n    }\n]\n\n\n\n\nPrompt\n\n\nYou can add a \nprompt\n property to each query object to set the placeholder or prompt text in the search input for the query.\n\n\nSelection mode\n\n\nYou can add a \nselectionMode\n property to control what results users can select in the results grid.  You need to specify any of the dgrid Selection mixin modes.\n\n\nYou can set this both for all queries (specify as a sibling of the \nqueries\n property and optionally override for each query\n\n\nSymbology\n\n\nYou can add a \nresultsSymbols\n property to override the default symbology of each FindResult.  You can also add a \nselectedSymbols\n property to override the symbology used to depict selected find results in the map.\n\n\nEach is an object with\n\n\n\n\npoint\n\n\npolygon\n\n\npolyline\n\n\n\n\nproperties.  Each of which must be a fully formed JSON symbol definition appropriate to the geometry type.  Check viewer.js for examples.\n\n\nCustom grid event functions\n\n\nYou can add custom handlers for dgrid events by adding a \ncustomGridHandlers\n property which should be an array of objects:\n\n\ncustomGridHandlers: [\n  {\n    event: '.dgrid-row:click',\n    handler: function ( event ) {}\n  }\n]\n\n\n\n\nExample Config Object\n\n\nfind: {\n    include: true,\n    id: 'find',\n    type: 'titlePane',\n    path: 'gis/dijit/Find',\n    title: 'Find',\n    open: false,\n    position: 8,\n    options: {\n    map: true,\n        queries: [\n            {\n                description: 'Buildings',\n                url: 'https://localhost/arcgis/rest/services/Buildings/MapServer',\n                layerIds: [ 0 ],\n                searchFields: [ 'BUILDING', 'NAME' ],\n                minChars: 2,\n                prompt: 'Bldg# or name',\n                gridColumns: [\n                    { field: 'BUILDING', label: 'Building', resizable: false, width: 75, visible: true },\n                    { field: 'NAME', label: 'Name', visible: true, get: function ( result ) {\n                        var name = result.feature.attributes.NAME;\n                        if ( result.feature.attributes.STATUS !== 'ACTIVE' ) {\n                            name += ' ( ' + result.feature.attributes.STATUS + ' )';\n                        }\n                        return name;\n                    } }\n                ],\n                sort: [\n                    {\n                        attribute: 'BUILDING',\n                        descending: false\n                    }\n                ]\n            },\n            {\n                description: 'Building Entrances',\n                url: 'https://localhost/arcgis/rest/services/BuildingEntrances/MapServer',\n                layerIds: [ 0 ],\n                searchFields: [ 'BUILDING_DOOR_SEARCH' ],\n                minChars: 2,\n                prompt: 'Bldg# Door#',\n                gridColumns: [\n                    { field: 'EQUIPMENT', label: 'Equipment No', resizable: false, width: 75 },\n                    { field: 'BUILDING', label: 'Building', resizable: false, width: 75 },\n                    { field: 'FLOOR', label: 'Floor', resizable: false, width: 50 },\n                    { field: 'ASSET_NO', label: 'Door No', resizable: false, width: 50 },\n                    { field: 'SORT_VAL', visible: false, get: function ( item ) {\n                        return String( '0000' + item.feature.attributes.ASSET_NO ).slice( -4 );\n                    } }\n                ],\n                sort: [\n                    {\n                        attribute: 'SORT_VAL',\n                        descending: false\n                    }\n                ],\n                customGridEventHandlers: [\n                    {\n                        event: 'dgrid-select',\n                        handler: function ( event ) {\n                            var result = event.rows;\n                            console.log( result );\n                        }\n                    }\n                ],\n                selectionMode: 'single'\n            }\n        ],\n        selectionSymbols: {\n            polygon: {\n                type: 'esriSFS',\n                style: 'esriSFSSolid',\n                color: [ 255, 0, 0, 62 ],\n                outline: {\n                    type: 'esriSLS',\n                    style: 'esriSLSSolid',\n                    color: [ 255, 0, 0, 255 ],\n                    width: 3\n                }\n            },\n            point: {\n                type: 'esriSMS',\n                style: 'esriSMSCircle',\n                size: 25,\n                color: [ 255, 0, 0, 62 ],\n                angle: 0,\n                xoffset: 0,\n                yoffset: 0,\n                outline: {\n                    type: 'esriSLS',\n                    style: 'esriSLSSolid',\n                    color: [ 255, 0, 0, 255 ],\n                    width: 2\n                }\n            }\n        },\n        selectionMode: 'extended'\n    }\n},",
            "title": "Find"
        },
        {
            "location": "/widgets/Find/#find",
            "text": "The Find widget allows you to configure multiple searches against an ArcGiS map service.  These searches can be conducted on:   a single field of a single layer  many fields of a single layer  or on many fields of many layers",
            "title": "Find"
        },
        {
            "location": "/widgets/Find/#features",
            "text": "Configurable columns for each query  Configurable sort for each query  Configurable prompt for each query  Configurable symbology, both the base symbology used to show each find result on the map as well as a different symbology for the selected find result(s)  Configurable zoom extent scale factor - this will be used to expand the extent when setting extent on the map.  Options for controlling FindTask's exact match option and how zoom is handled when selecting results in the result list.",
            "title": "Features"
        },
        {
            "location": "/widgets/Find/#important-concepts",
            "text": "When configuring the various options, it's important to remember that the widget is based on the  FindTask  and all results will be a FindResult object.  A FindResult object will contain a  feature  attribute which is a Graphic object.  This means it will have an  attributes  object with the properties of each result as specified by the layer in the base service.  It is important to recognize that the attribute names in this  attributes  property will be the field aliases specified for each field in the service definition and not the actual field name.  It is also important to understand that different layers in a map service can have very different attributes but the grid columns you specify apply to all layers included in the search.  It is therefore recommended to achieve best results that you either limit the layers included in each search to layers that have similar attributes  or , limit the columns you specify to fields shared by all layers in a search.",
            "title": "Important concepts"
        },
        {
            "location": "/widgets/Find/#tips",
            "text": "If you can control the service, it may be useful to use common aliases for fields in different layers.  For example:   PDNAME -  Name  FDNAME -  Name  RESNAME -  Name   You can also use a  get  function (detailed below) to compute and store a value on each FindResult item in your results.  A get function will be invoked and passed the FindResult object.  You can test for different properties to format the returned string.",
            "title": "Tips"
        },
        {
            "location": "/widgets/Find/#specifying-columns",
            "text": "There are two ways to specify columns.  Each has it's own benefits but follows the rules outlined in the  dgrid documentation  for specifying grid structures.  Using an the array approach gives more flexibility but the object form is a handy shortcut for simple configurations.",
            "title": "Specifying columns"
        },
        {
            "location": "/widgets/Find/#as-an-array-of-objects",
            "text": "Add a  gridColumns  property to the search object.  The value should be an array of objects with the following properties:   field : this is the field alias of the column to get the value from.  get : this should be a function that accepts a find result item as the only argument and returns a string to display.  label : The column heading  resizable   : whether or not the column can be resized  visible   : set to false to compute and store a value on each FindResult item without displaying it in a column.  This is useful for sorting.  width : initial width of the column",
            "title": "As an array of objects"
        },
        {
            "location": "/widgets/Find/#as-an-object",
            "text": "This is a handy shortcut for specifying column defininitons but is much less flexible.  Check the dgrid documentation for details.  Another way to specify a column is to use the get function.  Using this approach, the underlying dgrid instance will call the function you specify as the  get  property of a column object.  This function will receive the FindResult object and should return a string.  Check the Dgrid documentation for more information.  You can specify a visible property for each property.  Setting this to false is a useful way of computing and storing a property which can be specified as a attribute to sort on but will not be shown in the grid:",
            "title": "As an object"
        },
        {
            "location": "/widgets/Find/#get-function",
            "text": "The get function can be used to compute and return a string to display in a column or use as a sort attribute.  The partial example below uses a get function to to create a column that is not displayed in the grid but is used to sort the results.  gridColumns: [\n    { field: 'SORT_VAL', visible: false, get: function ( item ) {\n        return String( '0000' + item.feature.attributes.ASSET_NO ).slice( -4 );\n    } }\n],\nsort: [\n    {\n        attribute: 'SORT_VAL',\n        descending: false\n    }\n]",
            "title": "Get Function"
        },
        {
            "location": "/widgets/Find/#prompt",
            "text": "You can add a  prompt  property to each query object to set the placeholder or prompt text in the search input for the query.",
            "title": "Prompt"
        },
        {
            "location": "/widgets/Find/#selection-mode",
            "text": "You can add a  selectionMode  property to control what results users can select in the results grid.  You need to specify any of the dgrid Selection mixin modes.  You can set this both for all queries (specify as a sibling of the  queries  property and optionally override for each query",
            "title": "Selection mode"
        },
        {
            "location": "/widgets/Find/#symbology",
            "text": "You can add a  resultsSymbols  property to override the default symbology of each FindResult.  You can also add a  selectedSymbols  property to override the symbology used to depict selected find results in the map.  Each is an object with   point  polygon  polyline   properties.  Each of which must be a fully formed JSON symbol definition appropriate to the geometry type.  Check viewer.js for examples.",
            "title": "Symbology"
        },
        {
            "location": "/widgets/Find/#custom-grid-event-functions",
            "text": "You can add custom handlers for dgrid events by adding a  customGridHandlers  property which should be an array of objects:  customGridHandlers: [\n  {\n    event: '.dgrid-row:click',\n    handler: function ( event ) {}\n  }\n]",
            "title": "Custom grid event functions"
        },
        {
            "location": "/widgets/Find/#example-config-object",
            "text": "find: {\n    include: true,\n    id: 'find',\n    type: 'titlePane',\n    path: 'gis/dijit/Find',\n    title: 'Find',\n    open: false,\n    position: 8,\n    options: {\n    map: true,\n        queries: [\n            {\n                description: 'Buildings',\n                url: 'https://localhost/arcgis/rest/services/Buildings/MapServer',\n                layerIds: [ 0 ],\n                searchFields: [ 'BUILDING', 'NAME' ],\n                minChars: 2,\n                prompt: 'Bldg# or name',\n                gridColumns: [\n                    { field: 'BUILDING', label: 'Building', resizable: false, width: 75, visible: true },\n                    { field: 'NAME', label: 'Name', visible: true, get: function ( result ) {\n                        var name = result.feature.attributes.NAME;\n                        if ( result.feature.attributes.STATUS !== 'ACTIVE' ) {\n                            name += ' ( ' + result.feature.attributes.STATUS + ' )';\n                        }\n                        return name;\n                    } }\n                ],\n                sort: [\n                    {\n                        attribute: 'BUILDING',\n                        descending: false\n                    }\n                ]\n            },\n            {\n                description: 'Building Entrances',\n                url: 'https://localhost/arcgis/rest/services/BuildingEntrances/MapServer',\n                layerIds: [ 0 ],\n                searchFields: [ 'BUILDING_DOOR_SEARCH' ],\n                minChars: 2,\n                prompt: 'Bldg# Door#',\n                gridColumns: [\n                    { field: 'EQUIPMENT', label: 'Equipment No', resizable: false, width: 75 },\n                    { field: 'BUILDING', label: 'Building', resizable: false, width: 75 },\n                    { field: 'FLOOR', label: 'Floor', resizable: false, width: 50 },\n                    { field: 'ASSET_NO', label: 'Door No', resizable: false, width: 50 },\n                    { field: 'SORT_VAL', visible: false, get: function ( item ) {\n                        return String( '0000' + item.feature.attributes.ASSET_NO ).slice( -4 );\n                    } }\n                ],\n                sort: [\n                    {\n                        attribute: 'SORT_VAL',\n                        descending: false\n                    }\n                ],\n                customGridEventHandlers: [\n                    {\n                        event: 'dgrid-select',\n                        handler: function ( event ) {\n                            var result = event.rows;\n                            console.log( result );\n                        }\n                    }\n                ],\n                selectionMode: 'single'\n            }\n        ],\n        selectionSymbols: {\n            polygon: {\n                type: 'esriSFS',\n                style: 'esriSFSSolid',\n                color: [ 255, 0, 0, 62 ],\n                outline: {\n                    type: 'esriSLS',\n                    style: 'esriSLSSolid',\n                    color: [ 255, 0, 0, 255 ],\n                    width: 3\n                }\n            },\n            point: {\n                type: 'esriSMS',\n                style: 'esriSMSCircle',\n                size: 25,\n                color: [ 255, 0, 0, 62 ],\n                angle: 0,\n                xoffset: 0,\n                yoffset: 0,\n                outline: {\n                    type: 'esriSLS',\n                    style: 'esriSLSSolid',\n                    color: [ 255, 0, 0, 255 ],\n                    width: 2\n                }\n            }\n        },\n        selectionMode: 'extended'\n    }\n},",
            "title": "Example Config Object"
        },
        {
            "location": "/widgets/Geocoder/",
            "text": "Geocoder\n\n\nYou can use the default ArcGIS [Class:Geocoder] (https://developers.arcgis.com/javascript/jsapi/geocoder-amd.html) or a custom geocoder\n\n\nExample Config Object for default Geocoder\n\n\ngeocoder: {\n    include: true,\n    id: 'geocoder',\n    type: 'domNode',\n    path: 'esri/dijit/Geocoder',\n    srcNodeRef: 'geocodeDijit',\n    options: {\n        map: true,\n        mapRightClickMenu: true,\n        geocoderOptions: {\n          autoComplete: true,\n          arcgisGeocoder: {\n             placeholder: 'Enter an address or place'\n          }\n        }\n    }\n},\n\n\n\n\nIf the width of the search box for the geocoder widget is not wide enough you can alter \nviewer\\js\\gis\\dijit\\Geocoder\\css\\Geocoder.css\n\n\nTry using (or altering) both of the width values below that will work for your implementation\n\n\n.gis_GeocoderDijit .searchContainer {\n    position: absolute;\n    top: 0;\n    left: 100%;\n    width: 250px;\n}\n.gis_GeocoderDijit .esriGeocoderResults {\n    display: none;\n    z-index: 99;\n    width: 279px;\n    position: absolute;\n    left: 0;\n    top: 100%;\n    margin: -3px 0 0 -31px;\n    border: 1px solid #57585A;\n    border-top: 0;\n    padding: 0;\n    background: #fff;\n    -webkit-border-radius: 0 0 5px 5px;\n    border-radius: 0 0 5px 5px;\n}\n\n\n\n\nExample Config Object for custom Geocoder\n\n\ngeocoder: {\n    include: true,\n    id: 'geocoder',\n    type: 'domNode',\n    path: 'gis/dijit/Geocoder',\n    srcNodeRef: 'geocodeDijit',\n    options: {\n        map: true,\n        mapRightClickMenu: true,\n        geocoderOptions: {\n            autoComplete: true,\n            arcgisGeocoder: true, //if true a pick list showing your custom geocoder(s) below and the ESRI widget will appear for the end user to select\n                zoomScale: 1000,\n                placeholder: 'Search for an address',\n                // name below will appear in widget pick list if arcgisGeocoder:true\n                geocoders: [{ url: 'http://ServerName/arcgis/rest/services/GeocodeServiceName/GeocodeServer',\n                      name: 'My Address Points'\n               }]\n        }\n    }\n},",
            "title": "Geocoder"
        },
        {
            "location": "/widgets/Geocoder/#geocoder",
            "text": "You can use the default ArcGIS [Class:Geocoder] (https://developers.arcgis.com/javascript/jsapi/geocoder-amd.html) or a custom geocoder",
            "title": "Geocoder"
        },
        {
            "location": "/widgets/Geocoder/#example-config-object-for-default-geocoder",
            "text": "geocoder: {\n    include: true,\n    id: 'geocoder',\n    type: 'domNode',\n    path: 'esri/dijit/Geocoder',\n    srcNodeRef: 'geocodeDijit',\n    options: {\n        map: true,\n        mapRightClickMenu: true,\n        geocoderOptions: {\n          autoComplete: true,\n          arcgisGeocoder: {\n             placeholder: 'Enter an address or place'\n          }\n        }\n    }\n},  If the width of the search box for the geocoder widget is not wide enough you can alter  viewer\\js\\gis\\dijit\\Geocoder\\css\\Geocoder.css  Try using (or altering) both of the width values below that will work for your implementation  .gis_GeocoderDijit .searchContainer {\n    position: absolute;\n    top: 0;\n    left: 100%;\n    width: 250px;\n}\n.gis_GeocoderDijit .esriGeocoderResults {\n    display: none;\n    z-index: 99;\n    width: 279px;\n    position: absolute;\n    left: 0;\n    top: 100%;\n    margin: -3px 0 0 -31px;\n    border: 1px solid #57585A;\n    border-top: 0;\n    padding: 0;\n    background: #fff;\n    -webkit-border-radius: 0 0 5px 5px;\n    border-radius: 0 0 5px 5px;\n}",
            "title": "Example Config Object for default Geocoder"
        },
        {
            "location": "/widgets/Geocoder/#example-config-object-for-custom-geocoder",
            "text": "geocoder: {\n    include: true,\n    id: 'geocoder',\n    type: 'domNode',\n    path: 'gis/dijit/Geocoder',\n    srcNodeRef: 'geocodeDijit',\n    options: {\n        map: true,\n        mapRightClickMenu: true,\n        geocoderOptions: {\n            autoComplete: true,\n            arcgisGeocoder: true, //if true a pick list showing your custom geocoder(s) below and the ESRI widget will appear for the end user to select\n                zoomScale: 1000,\n                placeholder: 'Search for an address',\n                // name below will appear in widget pick list if arcgisGeocoder:true\n                geocoders: [{ url: 'http://ServerName/arcgis/rest/services/GeocodeServiceName/GeocodeServer',\n                      name: 'My Address Points'\n               }]\n        }\n    }\n},",
            "title": "Example Config Object for custom Geocoder"
        },
        {
            "location": "/widgets/Growler/",
            "text": "Growler\n\n\nA notification system using \ndojo/topic\n.\n\n\nTopic Usage\n\n\nBy including the growler widget and using \ntopic.publish\n you can create new growlers. This widget subscribes to the \n'growler/growl'\n topic.\n\n\nExample:\n\n\ngeocoder.on('select', function(results){\n    topic.publish('growler/growl', {\n        title: 'Address found',\n        message: 'Your address will appear on the map as a blue dot.'\n        level: 'success', //possible classes are default, warning, success, error, info\n        timeout: 10000,\n        opacity: 0.5\n\n    });\n});\n\n\n\n\nExample Config Object\n\n\ngrowler: {\n    include: true,\n    id: 'growler',\n    type: 'domNode',\n    path: 'gis/dijit/Growler',\n    srcNodeRef: 'growlerDijit',\n    options: {}\n},",
            "title": "Growler"
        },
        {
            "location": "/widgets/Growler/#growler",
            "text": "A notification system using  dojo/topic .",
            "title": "Growler"
        },
        {
            "location": "/widgets/Growler/#topic-usage",
            "text": "By including the growler widget and using  topic.publish  you can create new growlers. This widget subscribes to the  'growler/growl'  topic.",
            "title": "Topic Usage"
        },
        {
            "location": "/widgets/Growler/#example",
            "text": "geocoder.on('select', function(results){\n    topic.publish('growler/growl', {\n        title: 'Address found',\n        message: 'Your address will appear on the map as a blue dot.'\n        level: 'success', //possible classes are default, warning, success, error, info\n        timeout: 10000,\n        opacity: 0.5\n\n    });\n});",
            "title": "Example:"
        },
        {
            "location": "/widgets/Growler/#example-config-object",
            "text": "growler: {\n    include: true,\n    id: 'growler',\n    type: 'domNode',\n    path: 'gis/dijit/Growler',\n    srcNodeRef: 'growlerDijit',\n    options: {}\n},",
            "title": "Example Config Object"
        },
        {
            "location": "/widgets/Help/",
            "text": "Help\n\n\nAvailable Options\n\n\n\n\n\n\n\n\nProperty name\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndraggable\n\n\nboolean\n\n\nEnables dragging of the help window\n\n\n\n\n\n\ndomTarget\n\n\nstring\n\n\nId of the dom node to place the help link\n\n\n\n\n\n\nhtml\n\n\nstring\n\n\nHTML for the help link\n\n\n\n\n\n\ntitle\n\n\nstring\n\n\nTitle for the help dialog\n\n\n\n\n\n\n\n\nExample config\n\n\nhelp: {\n    include: true,\n    id: 'help',\n    type: 'floating',\n    path: 'gis/dijit/Help',\n    title: 'Help',\n    options: {}\n}",
            "title": "Help"
        },
        {
            "location": "/widgets/Help/#help",
            "text": "",
            "title": "Help"
        },
        {
            "location": "/widgets/Help/#available-options",
            "text": "Property name  Type  Description      draggable  boolean  Enables dragging of the help window    domTarget  string  Id of the dom node to place the help link    html  string  HTML for the help link    title  string  Title for the help dialog",
            "title": "Available Options"
        },
        {
            "location": "/widgets/Help/#example-config",
            "text": "help: {\n    include: true,\n    id: 'help',\n    type: 'floating',\n    path: 'gis/dijit/Help',\n    title: 'Help',\n    options: {}\n}",
            "title": "Example config"
        },
        {
            "location": "/widgets/HomeButton/",
            "text": "Home Button\n\n\nEsri's out-of-the-box home button widget. See \nesri/dijit/HomeButton\n \ndocumentation\n\n\nExample Config Object\n\n\nhomeButton: {\n    include: true,\n    id: 'homeButton',\n    type: 'domNode',\n    path: 'esri/dijit/HomeButton',\n    srcNodeRef: 'homeButton',\n    options: {\n        map: true,\n        extent: new Extent({\n            xmin: -180,\n            ymin: -85,\n            xmax: 180,\n            ymax: 85,\n            spatialReference: {\n                wkid: 4326\n            }\n        })\n    }\n},",
            "title": "Home Button"
        },
        {
            "location": "/widgets/HomeButton/#home-button",
            "text": "Esri's out-of-the-box home button widget. See  esri/dijit/HomeButton   documentation",
            "title": "Home Button"
        },
        {
            "location": "/widgets/HomeButton/#example-config-object",
            "text": "homeButton: {\n    include: true,\n    id: 'homeButton',\n    type: 'domNode',\n    path: 'esri/dijit/HomeButton',\n    srcNodeRef: 'homeButton',\n    options: {\n        map: true,\n        extent: new Extent({\n            xmin: -180,\n            ymin: -85,\n            xmax: 180,\n            ymax: 85,\n            spatialReference: {\n                wkid: 4326\n            }\n        })\n    }\n},",
            "title": "Example Config Object"
        },
        {
            "location": "/widgets/Identify/",
            "text": "Identify\n\n\nExample Config Object\n\n\nidentify: {\n   include: true,\n   id: 'identify',\n   type: 'invisible',\n   path: 'gis/dijit/Identify',\n   options: 'config/identify'\n},\n\n\n\n\nConfiguration File\n\n\nThe file can be found here \nviewer/js/config/identify.js\n. CMV comes with examples inside this file. Review this file on how to configure the widget for your use.\n\n\nIdentify options\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmapClickMode\n\n\nBoolean\n\n\nIn CMV, set this to \ntrue\n to enable the shared map click functionality.\n\n\n\n\n\n\nmapRightClickMenu\n\n\nBoolean\n\n\nIn CMV, set this to \ntrue\n to enable the right click identify menu Alternatively set this to \n'identify'\n\n\n\n\n\n\nidentifyLayerInfos\n\n\nArray\nObject\n\n\nIn CMV, set this to \ntrue\n to enable the controller to pass the layer infos\n\n\n\n\n\n\nidentifies\n\n\nObject\n\n\nThe identify info for each layer and sublayer. See \nIdentifies Object\nfor more details\n\n\n\n\n\n\ndraggable\n\n\nBoolean\n\n\nWhether or not to enable the click/drag functionality of the popup\n\n\n\n\n\n\nidentifyTolerance\n\n\nNumber\n\n\nThe number of pixels to identify around a map click. The default is \n5\n\n\n\n\n\n\n\n\nIdentifies object\n\n\nAn identifies object consists of the nested structure below where \nlayer\n is the layer id, and\n\n0\n is the id number of the sublayer.\n\n\nlayer: {\n  0: {\n    // popup properties\n  }\n}\n\n\n\n\nNote:\n CMV uses the \nPopupTemplate Class\n for the Identify widget. The  \nArcGIS JS API Documentation\n needs revision to clarify the use of the field names when using the PopupTemplate Class. On the page linked above the section named \"fieldInfo structure:\" states that \nfieldName:\n comes from the name of the field. This is vague and is clarified below.\n\n\nTo display your identify results with attribute values you must \nuse the \nfield alias\n as defined in the map service rest end point\n and \ndo not use any other field name or alias defined in the geodatabase\n.\n\n\n\n\nIf a MXD alias is provided when the map service is published, the MXD alias is used as the field name\n\n\nOtherwise, the geodatabase alias is used if it is provided\n\n\nFinally, the geodatabase field name will be used\n\n\n\n\nFormatting values\n\n\nFormatting values in the identify popup can be done using the \nformatter\n property in the \nfieldInfos\n.\n\n\nFormatter parameters:\n\n\n\n\nvalue\n - the value of the given field name. This will be an undefined value if\n            the field name given does not exist. (useful for creating extra properties)\n\n\nattributes\n - an object with all of the properties in the identified feature\n\n\ngeometry\n - the identified feature geometry\n\n\n\n\nfieldInfos: [{\n    fieldName: 'pole_id',\n    visible: true,\n    formatter: function (value, attributes, geometry) {\n\n        // create a link to a different app\n        return '\na href=\n/poleapp/' + value + '\nPole App\n/a\n';\n    }\n}]\n\n\n\n\nImages and Media\n\n\nIn general, images and other media like pie charts can be created using the\n\nmediaInfos\n property of the popup definition. But in other advanced cases,\n\nformatter\n may provide the functionality. In addition, the \ncontent\n property\nmay be used for other advanced cases. \nSee below.\n\n\nBuild your own identify popup\n\n\nThe JavascriptAPI has \na nice tutorial\n on formatting the info window content. Specifying a content formatter will allow you to do things like:\n\n\n\n\nProgramatically generate html for the popup (bullet list)\n\n\nAlter field values (convert a image url to image)\n\n\nEmbed other widgets like a tab container and chart/table in the popup window\n\n\n\n\nThe identify widget will check for a \ncontent\n property in each \nidentifies\n object. This property can be either a \nstring or function\n.\nExample usage:\n\n\nelectric: {\n    1: {\n    title: 'Pole',\n    content: formatterFunction //or html string\n    }\n}\n\n\n\n\nIn the example above, formatterFunction is a \nglobal\n function, which Esri recommends. However, there is a safer and better way to pass a function and avoid adding globals to the application.\n\n\nConvert the identify.js into a config similar to the viewer.js:\n\n\ndefine([\n    //include any widgets and dojo class paths you want to use here\n], function (/* each widget you include should have a variable here */) {\n    return {\n        map: true,\n            mapClickMode: true,\n            mapRightClickMenu: true,\n            identifyLayerInfos: true,\n            identifyTolerance: 5,\n            identifies: {}\n    };\n});\n\n\n\n\nJust before the return statement, create a local variable, lets call it formatters:\n\n\nvar formatters = {\n    link: function(identifyResults) {\n        //add logic to format the results and return an html string or domNode\n    }\n};\n\n\n\n\nAdd a layer to the identifies and add the \ncontent: formatters.link\n\n\nTo add something more complex like a TabContainer to the identify window:\n\n\nvar formatters = {\n    attributeList: function (identifyInfo) {\n            var listItem = '\nli\n{0}: {1}\n/li\n';\n            var html = ['\nul\n'];\n            for (var a in identifyInfo.attributes) {\n                //make sure a is an own property\n                if (identifyInfo.attributes.hasOwnProperty(a)) {\n                    html.push(lang.replace(listItem, [a, identifyInfo.attributes[a]]));\n                }\n            }\n            html.push('\n/ul\n');\n            return html.join('');\n        },\n    tabContainer: function(identifyResults) {\n        var container = new TabContainer(\n            style: 'height: 100%; width: 100%;'\n                }, domConstruct.create('div'));\n        container.addChild(new ContentPane({\n            title: 'my title',\n            content: 'You clicked a feature. The results are in the next tab'\n        });\n        container.addChild(new ContentPane({\n            title: 'Attributes',\n            content: formatters.attributeList(identifyresults)\n        });\n        return container.domNode;\n    }\n};\n\n\n\n\nThe final identify result:\n\n\ndefine([\n    'dojo/_base/lang',\n    'dijit/layout/TabContainer',\n    'dijit/layout/ContentPane',\n    'dojo/dom-construct',\n], function (lang, Container, ContentPane, domConstruct) {\n    var formatters = {\n        attributeList: function (identifyResults) {\n            var listItem = '\nli\n{0}: {1}\n/li\n';\n            var html = ['\nul\n'];\n            for (var a in identifyResults.attributes) {\n                //make sure a is an own property\n                if (identifyResults.attributes.hasOwnProperty(a)) {\n                    html.push(lang.replace(listItem, [a, identifyResults.attributes[a]]));\n                }\n            }\n            html.push('\n/ul\n');\n            return html.join('');\n        },\n    tabContainer: function(identifyResults) {\n        var container = new TabContainer(\n            style: 'height: 100%; width: 100%;'\n                }, domConstruct.create('div'));\n        container.addChild(new ContentPane({\n            title: 'my title',\n            content: 'You clicked a feature. The results are in the next tab'\n        });\n        container.addChild(new ContentPane({\n            title: 'my title',\n            content: formatters.attributeList(identifyresults)\n        });\n        return container.domNode;\n    }\n    };\n    return {\n        map: true,\n        mapClickMode: true,\n        mapRightClickMenu: true,\n        identifyLayerInfos: true,\n        identifyTolerance: 5,\n        identifies: {\n            electric: {\n            1: {\n            title: 'Pole',\n            content: formatters.tabContainer\n            }\n        }\n        }\n\n    };\n});",
            "title": "Identify"
        },
        {
            "location": "/widgets/Identify/#identify",
            "text": "",
            "title": "Identify"
        },
        {
            "location": "/widgets/Identify/#example-config-object",
            "text": "identify: {\n   include: true,\n   id: 'identify',\n   type: 'invisible',\n   path: 'gis/dijit/Identify',\n   options: 'config/identify'\n},",
            "title": "Example Config Object"
        },
        {
            "location": "/widgets/Identify/#configuration-file",
            "text": "The file can be found here  viewer/js/config/identify.js . CMV comes with examples inside this file. Review this file on how to configure the widget for your use.",
            "title": "Configuration File"
        },
        {
            "location": "/widgets/Identify/#identify-options",
            "text": "Property  Type  Description      mapClickMode  Boolean  In CMV, set this to  true  to enable the shared map click functionality.    mapRightClickMenu  Boolean  In CMV, set this to  true  to enable the right click identify menu Alternatively set this to  'identify'    identifyLayerInfos  Array Object  In CMV, set this to  true  to enable the controller to pass the layer infos    identifies  Object  The identify info for each layer and sublayer. See  Identifies Object for more details    draggable  Boolean  Whether or not to enable the click/drag functionality of the popup    identifyTolerance  Number  The number of pixels to identify around a map click. The default is  5",
            "title": "Identify options"
        },
        {
            "location": "/widgets/Identify/#identifies-object",
            "text": "An identifies object consists of the nested structure below where  layer  is the layer id, and 0  is the id number of the sublayer.  layer: {\n  0: {\n    // popup properties\n  }\n}  Note:  CMV uses the  PopupTemplate Class  for the Identify widget. The   ArcGIS JS API Documentation  needs revision to clarify the use of the field names when using the PopupTemplate Class. On the page linked above the section named \"fieldInfo structure:\" states that  fieldName:  comes from the name of the field. This is vague and is clarified below.  To display your identify results with attribute values you must  use the  field alias  as defined in the map service rest end point  and  do not use any other field name or alias defined in the geodatabase .   If a MXD alias is provided when the map service is published, the MXD alias is used as the field name  Otherwise, the geodatabase alias is used if it is provided  Finally, the geodatabase field name will be used",
            "title": "Identifies object"
        },
        {
            "location": "/widgets/Identify/#formatting-values",
            "text": "Formatting values in the identify popup can be done using the  formatter  property in the  fieldInfos .  Formatter parameters:   value  - the value of the given field name. This will be an undefined value if\n            the field name given does not exist. (useful for creating extra properties)  attributes  - an object with all of the properties in the identified feature  geometry  - the identified feature geometry   fieldInfos: [{\n    fieldName: 'pole_id',\n    visible: true,\n    formatter: function (value, attributes, geometry) {\n\n        // create a link to a different app\n        return ' a href= /poleapp/' + value + ' Pole App /a ';\n    }\n}]",
            "title": "Formatting values"
        },
        {
            "location": "/widgets/Identify/#images-and-media",
            "text": "In general, images and other media like pie charts can be created using the mediaInfos  property of the popup definition. But in other advanced cases, formatter  may provide the functionality. In addition, the  content  property\nmay be used for other advanced cases.  See below.",
            "title": "Images and Media"
        },
        {
            "location": "/widgets/Identify/#build-your-own-identify-popup",
            "text": "The JavascriptAPI has  a nice tutorial  on formatting the info window content. Specifying a content formatter will allow you to do things like:   Programatically generate html for the popup (bullet list)  Alter field values (convert a image url to image)  Embed other widgets like a tab container and chart/table in the popup window   The identify widget will check for a  content  property in each  identifies  object. This property can be either a  string or function .\nExample usage:  electric: {\n    1: {\n    title: 'Pole',\n    content: formatterFunction //or html string\n    }\n}  In the example above, formatterFunction is a  global  function, which Esri recommends. However, there is a safer and better way to pass a function and avoid adding globals to the application.  Convert the identify.js into a config similar to the viewer.js:  define([\n    //include any widgets and dojo class paths you want to use here\n], function (/* each widget you include should have a variable here */) {\n    return {\n        map: true,\n            mapClickMode: true,\n            mapRightClickMenu: true,\n            identifyLayerInfos: true,\n            identifyTolerance: 5,\n            identifies: {}\n    };\n});  Just before the return statement, create a local variable, lets call it formatters:  var formatters = {\n    link: function(identifyResults) {\n        //add logic to format the results and return an html string or domNode\n    }\n};  Add a layer to the identifies and add the  content: formatters.link  To add something more complex like a TabContainer to the identify window:  var formatters = {\n    attributeList: function (identifyInfo) {\n            var listItem = ' li {0}: {1} /li ';\n            var html = [' ul '];\n            for (var a in identifyInfo.attributes) {\n                //make sure a is an own property\n                if (identifyInfo.attributes.hasOwnProperty(a)) {\n                    html.push(lang.replace(listItem, [a, identifyInfo.attributes[a]]));\n                }\n            }\n            html.push(' /ul ');\n            return html.join('');\n        },\n    tabContainer: function(identifyResults) {\n        var container = new TabContainer(\n            style: 'height: 100%; width: 100%;'\n                }, domConstruct.create('div'));\n        container.addChild(new ContentPane({\n            title: 'my title',\n            content: 'You clicked a feature. The results are in the next tab'\n        });\n        container.addChild(new ContentPane({\n            title: 'Attributes',\n            content: formatters.attributeList(identifyresults)\n        });\n        return container.domNode;\n    }\n};  The final identify result:  define([\n    'dojo/_base/lang',\n    'dijit/layout/TabContainer',\n    'dijit/layout/ContentPane',\n    'dojo/dom-construct',\n], function (lang, Container, ContentPane, domConstruct) {\n    var formatters = {\n        attributeList: function (identifyResults) {\n            var listItem = ' li {0}: {1} /li ';\n            var html = [' ul '];\n            for (var a in identifyResults.attributes) {\n                //make sure a is an own property\n                if (identifyResults.attributes.hasOwnProperty(a)) {\n                    html.push(lang.replace(listItem, [a, identifyResults.attributes[a]]));\n                }\n            }\n            html.push(' /ul ');\n            return html.join('');\n        },\n    tabContainer: function(identifyResults) {\n        var container = new TabContainer(\n            style: 'height: 100%; width: 100%;'\n                }, domConstruct.create('div'));\n        container.addChild(new ContentPane({\n            title: 'my title',\n            content: 'You clicked a feature. The results are in the next tab'\n        });\n        container.addChild(new ContentPane({\n            title: 'my title',\n            content: formatters.attributeList(identifyresults)\n        });\n        return container.domNode;\n    }\n    };\n    return {\n        map: true,\n        mapClickMode: true,\n        mapRightClickMenu: true,\n        identifyLayerInfos: true,\n        identifyTolerance: 5,\n        identifies: {\n            electric: {\n            1: {\n            title: 'Pole',\n            content: formatters.tabContainer\n            }\n        }\n        }\n\n    };\n});",
            "title": "Build your own identify popup"
        },
        {
            "location": "/widgets/LayerControl/",
            "text": "Layer Control\n\n\nA layer control widget for CMV. Just don't call it a TOC.\n\n\nFeatures\n\n\n\n\nToggle layer visibility\n\n\nLayer menu with Zoom To Layer, Transparency and Layer Swipe\n\n\nCapabilities to create custom dynamic sublayer menus\n\n\nLegends for ArcGIS layers\n\n\nSublayer/folder structure and toggling for ArcGIS dynamic layers\n\n\ncan be disabled\n\n\n\n\nsingle layer map services display legend in expand area\n\n\n\n\n\n\nLayer reordering in map and LayerControl widget\n\n\n\n\nSeparate vector and overlay layers (required for layer reordering)\n\n\nSupport for several layer types:\n\n\ndynamic\n\n\nfeature\n\n\ntiled\n\n\nimage\n\n\n\n\nLayerControl in CMV\n\n\nLayerControl can be easily loaded with CMV's widget loader. CMV creates an array with a \nLayerInfo\n object for each layer with parameters and options specific to the layer and its associated Control. \nlayerControlLayerInfos: true\n tells the widget loader to include the \nLayerInfos\n array. LayerControl can also be used in your widget. See below for more Class information.\n\n\nlayerControl: {\n    include: true,\n    id: 'layerControl',\n    type: 'titlePane',\n    path: 'gis/dijit/LayerControl',\n    title: 'Layers',\n    open: true,\n    position: 0,\n    options: {\n        map: true, //required\n        layerControlLayerInfos: true //required\n    }\n}\n\n\n\n\nEach layer has its own Control widget in LayerControl. Additional Control specific options can be specified with \nlayerControlLayerInfos\n. See Control Options below. The similarity/difference in names is a bit confusing. A future release of CMV will use a different system for widgets to obtain layer options. Not only will core widgets like LayerControl and Identify no longer need a tie in with CMV's Controller class, developers will be able to specify custom options objects through CMV's layer loader for use with their own widgets.\n\n\nCMV Dynamic Layer Example\n\n\n{\n    type: 'dynamic',\n    url: 'http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/PublicSafety/PublicSafetyOperationalLayers/MapServer',\n    title: 'Louisville Public Safety',\n    options: {\n        //layer options\n    },\n    layerControlLayerInfos: {\n        sublayers: false,\n        noTransparency: true\n    }\n}\n\n\n\n\nCMV Feature Layer Example\n\n\n{\n    type: 'feature',\n    url: 'http://services1.arcgis.com/g2TonOxuRkIqSOFx/arcgis/rest/services/MeetUpHomeTowns/FeatureServer/0',\n    title: 'STLJS Meetup Home Towns',\n    options: {\n        //layer options\n    },\n    layerControlLayerInfos: {\n        noLegend: true,\n        noZoom: true\n    }\n}\n\n\n\n\nLayerControl Class\n\n\nrequire(['gis/dijit/LayerControl'], function (LayerControl) {\n    var layerControl = new LayerControl({\n        map: map,\n        separated: true,\n        vectorReorder: true,\n        overlayReorder: true\n        layerInfos: [\n            // see LayerInfos\n        ]\n    }, srcRefNode);\n});\n\n\n\n\nWidget Construction Parameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmap\n\n\nObject\n\n\nesri/map\n instance. Required.\n\n\n\n\n\n\nlayerInfos\n\n\nArray\n\n\nArray of \nLayerInfos\n. Required. See LayerInfos.\n\n\n\n\n\n\nseparated\n\n\nBoolean\n\n\nSeparate vector and overlay layer types. Required for \nvectorReorder\n, \nvectorLabel\n, \noverlayReorder\n and \noverlayLabel\n. Default is \nfalse\n.\n\n\n\n\n\n\nvectorReorder\n\n\nBoolean\n\n\nEnable reordering of vector layers in map and Layer Control. Default is \nfalse\n.\n\n\n\n\n\n\nvectorLabel\n\n\nMixed\n\n\nLabel for vector layers. Default is \nfalse\n. Pass the label or html for quick easy custom styling of label text.\n\n\n\n\n\n\noverlayReorder\n\n\nBoolean\n\n\nEnable reordering of overlay layers in map and Layer Control. Default is \nfalse\n.\n\n\n\n\n\n\noverlayLabel\n\n\nMixed\n\n\nLabel for overlay layers. Default is \nfalse\n. Pass the label or html for quick easy custom styling of label text.\n\n\n\n\n\n\nnoLegend\n\n\nBoolean\n\n\nWhen \ntrue\n no legend is created for all layers. Can be overridden for specific layer(s) with `noLegend' layer option.\n\n\n\n\n\n\nnoZoom\n\n\nBoolean\n\n\nWhen \ntrue\n removes \"Zoom to Layer\" menu item for all layers. Can be overridden for specific layer(s) with `noZoom' layer option.\n\n\n\n\n\n\nnoTransparency\n\n\nBoolean\n\n\nWhen \ntrue\n removes \"Transparency\" menu item for all layers. Can be overridden for specific layer(s) with `noTransparency' layer option.\n\n\n\n\n\n\nswipe\n\n\nBoolean\n\n\nWhen \ntrue\n adds \"Layer Swipe\" menu item for all layers.  Can be overridden for specific layer(s) with \nswipe\n layer option.\n\n\n\n\n\n\nswiperButtonStyle\n\n\nString\n\n\nCSS for positioning \"Exit Layer Swipe\" button in the map. Must include \nposition:absolute;\n and a \nz-index\n. Default is \nposition:absolute;top:20px;left:120px;z-index:50;\n.\n\n\n\n\n\n\n\n\nMethods\n\n\n\n\n\n\n\n\nMethod\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nshowAllLayers()\n\n\nTurn all layers on.\n\n\n\n\n\n\nhideAllLayers()\n\n\nTurn all layers off.\n\n\n\n\n\n\n\n\nLayerInfos\n\n\nThe \nlayerInfo\n object contains configuration options for each layer control. LayerControl initializes each layer control using these parameters.\n\n\n{\n    layer: layer,\n    type: 'dynamic',\n    title: 'EPA TMDL 303d Reaches',\n    controlOptions: {\n        // see Control Options\n    }\n}\n\n\n\n\nLayerInfo Parameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlayer\n\n\nMixed\n\n\nA layer object OR layer id string.\n\n\n\n\n\n\ntype\n\n\nString\n\n\nSupports \ndynamic\n, \ntiled\n, \nimage\n and \nfeature\n. Additional layer types coming soon.\n\n\n\n\n\n\ntitle\n\n\nString\n\n\nTitle for the control. When loaded with CMV's widget loader this is the \ntitle\n option for the layer.\n\n\n\n\n\n\ncontrolOptions\n\n\nObject\n\n\nAdditional options for the layer control. See Control Options.\n\n\n\n\n\n\n\n\nControl Options\n\n\nAll layer types have common options while some options are specific to certain layer types. All \ncontrolOptions\n are Boolean except for \nsubLayerMenu\n, which is an object.\n\n\n\n\n\n\n\n\nOption\n\n\nDescription\n\n\nAffects\n\n\n\n\n\n\n\n\n\n\nexclude\n\n\nWhen \ntrue\n a layer control will not be added to the widget. Using \nexclude\n for a layer with layer reordering enabled which is not above or below all included layers will result in layer reordering issues.\n\n\nall layers\n\n\n\n\n\n\nnoLegend\n\n\nWhen \ntrue\n no legend is created. Set to \nfalse\n to override \nnoLegend: true\n widget parameter.\n\n\ndynamic, feature and tiled\n\n\n\n\n\n\nnoZoom\n\n\nWhen \ntrue\n removes \"Zoom to Layer\" menu item. Set to \nfalse\n to override \nnoZoom: true\n widget parameter.\n\n\nall layers\n\n\n\n\n\n\nnoTransparency\n\n\nWhen \ntrue\n removes \"Transparency\" menu item. Set to \nfalse\n to override \nnoTransparency: true\n widget parameter.\n\n\nall layers\n\n\n\n\n\n\nswipe\n\n\nWhen \ntrue\n adds \"Layer Swipe\" menu item. Set to \nfalse\n to override \nswipe: true\n widget parameter.\n\n\nall layers\n\n\n\n\n\n\nswipeScope\n\n\nWhen \ntrue\n adds Scope option to Layer Swipe menu. Default is \nfalse\n.\n\n\n\n\n\n\n\n\nexpanded\n\n\nWhen \ntrue\n expands top level exposing sublayers or legend.\n\n\ndynamic, feature \n tiled\n\n\n\n\n\n\nsublayers\n\n\nWhen \nfalse\n dynamic folder/sublayer structure is not created.\n\n\ndynamic\n\n\n\n\n\n\nmetadataUrl\n\n\nWhen \ntrue\n and layer has \nurl\n property (ArcGIS layers) links to service URL. When a URL links to said URL.\n\n\nall layers\n\n\n\n\n\n\nallSublayerToggles\n\n\nWhen \nfalse\n toggle all sublayers on/off layer menu items will not be included.\n\n\ndynamic\n\n\n\n\n\n\nsubLayerMenu\n\n\nAn object consisting of a key value pairs where they key is a layer type and the value is an array of menu items\n\n\nAll layers of type key given\n\n\n\n\n\n\n\n\nSub Layer Menu Items\n\n\nDynamic sublayers can have their own menu. The menu system is set up using dojo/topic so that another widget can listen to when a menu item is clicked, and manipulate or add functionality to the app. Each menu item in the array will apply to each layer of the type specified in the key. Each menu item inside the array has the following properties:\n- \nlabel\n - the string to display in the menu item\n- \niconClass\n - the font awesome icon class to add to the menu\n- \ntopic\n - the topic to publish when the menu item is clicked (see topics below)\n\n\n subLayerMenu: {\n  dynamic: [{\n      label: 'Query Layer...',\n      iconClass: 'fa fa-search fa-fw',\n      topic: 'queryLayer'\n  }, {\n      label: 'Open Attribute Table',\n      topic: 'openTable',\n      iconClass: 'fa fa-table fa-fw'\n  }]\n }\n}\n\n\n\n\nThe menu can be completely overridden on a per layer basis also using the layers' \nlayerControlLayerInfos.menu\n property. The \nmenu\n property is an array of menu items.\n\n\nlayerControlLayerInfos: {\n menu: [{\n      label: 'Query Layer...',\n      iconClass: 'fa fa-search fa-fw',\n      topic: 'queryLayer'\n  }, {\n      label: 'Open Attribute Table',\n      topic: 'openTable',\n      iconClass: 'fa fa-table fa-fw'\n  }]\n}\n\n\n\n\nTopics\n\n\nSubscribe to any of the following topics. CMV aims to please, so let us know if you would like a topic published for a particular user action, or layer/layer control state change.\n\n\nlayerControl/layerToggle\n is published when layer visibility changes via the layer checkbox.\n\n\ntopic.subscribe('layerControl/layerToggle', function (r) {\n    console.log(r.id); //layer id\n    console.log(r.visible); //layer visibility (true/false)\n});\n\n\n\n\nlayerControl/setVisibleLayers\n is published when visible layers are set on a dynamic layer.\n\n\ntopic.subscribe('layerControl/setVisibleLayers', function (r) {\n    console.log(r.id); //layer id\n    console.log(r.visibleLayers); //array of set visible layer ids\n});\n\n\n\n\nlayerControl/menuItemTopic\n is published when a dynamic sublayer menu item is clicked.\n\n\ntopic.subscribe('layerControl/menuItemTopic', function (r) {\n    console.log(r.layer); //layer id\n    console.log(r.subLayer); //array of set visible layer ids\n    console.log(r.iconNode); //a domNode to toggle font awesome classes on\n    console.log(r.menuItem); //the clicked menu item object in case you want to modify it\n\n    //modify the iconNode to show that something happened to this layer\n    if (r.iconNode) {\n        if (domClass.contains(r.iconNode, 'fa-fire')) {\n            domClass.remove(r.iconNode, 'fa-fire');\n        } else {\n            domClass.add(r.iconNode, 'fa-fire');\n        }\n    }\n});",
            "title": "Layer Control"
        },
        {
            "location": "/widgets/LayerControl/#layer-control",
            "text": "A layer control widget for CMV. Just don't call it a TOC.",
            "title": "Layer Control"
        },
        {
            "location": "/widgets/LayerControl/#features",
            "text": "Toggle layer visibility  Layer menu with Zoom To Layer, Transparency and Layer Swipe  Capabilities to create custom dynamic sublayer menus  Legends for ArcGIS layers  Sublayer/folder structure and toggling for ArcGIS dynamic layers  can be disabled   single layer map services display legend in expand area    Layer reordering in map and LayerControl widget   Separate vector and overlay layers (required for layer reordering)  Support for several layer types:  dynamic  feature  tiled  image",
            "title": "Features"
        },
        {
            "location": "/widgets/LayerControl/#layercontrol-in-cmv",
            "text": "LayerControl can be easily loaded with CMV's widget loader. CMV creates an array with a  LayerInfo  object for each layer with parameters and options specific to the layer and its associated Control.  layerControlLayerInfos: true  tells the widget loader to include the  LayerInfos  array. LayerControl can also be used in your widget. See below for more Class information.  layerControl: {\n    include: true,\n    id: 'layerControl',\n    type: 'titlePane',\n    path: 'gis/dijit/LayerControl',\n    title: 'Layers',\n    open: true,\n    position: 0,\n    options: {\n        map: true, //required\n        layerControlLayerInfos: true //required\n    }\n}  Each layer has its own Control widget in LayerControl. Additional Control specific options can be specified with  layerControlLayerInfos . See Control Options below. The similarity/difference in names is a bit confusing. A future release of CMV will use a different system for widgets to obtain layer options. Not only will core widgets like LayerControl and Identify no longer need a tie in with CMV's Controller class, developers will be able to specify custom options objects through CMV's layer loader for use with their own widgets.  CMV Dynamic Layer Example  {\n    type: 'dynamic',\n    url: 'http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/PublicSafety/PublicSafetyOperationalLayers/MapServer',\n    title: 'Louisville Public Safety',\n    options: {\n        //layer options\n    },\n    layerControlLayerInfos: {\n        sublayers: false,\n        noTransparency: true\n    }\n}  CMV Feature Layer Example  {\n    type: 'feature',\n    url: 'http://services1.arcgis.com/g2TonOxuRkIqSOFx/arcgis/rest/services/MeetUpHomeTowns/FeatureServer/0',\n    title: 'STLJS Meetup Home Towns',\n    options: {\n        //layer options\n    },\n    layerControlLayerInfos: {\n        noLegend: true,\n        noZoom: true\n    }\n}",
            "title": "LayerControl in CMV"
        },
        {
            "location": "/widgets/LayerControl/#layercontrol-class",
            "text": "require(['gis/dijit/LayerControl'], function (LayerControl) {\n    var layerControl = new LayerControl({\n        map: map,\n        separated: true,\n        vectorReorder: true,\n        overlayReorder: true\n        layerInfos: [\n            // see LayerInfos\n        ]\n    }, srcRefNode);\n});",
            "title": "LayerControl Class"
        },
        {
            "location": "/widgets/LayerControl/#widget-construction-parameters",
            "text": "Parameter  Type  Description      map  Object  esri/map  instance. Required.    layerInfos  Array  Array of  LayerInfos . Required. See LayerInfos.    separated  Boolean  Separate vector and overlay layer types. Required for  vectorReorder ,  vectorLabel ,  overlayReorder  and  overlayLabel . Default is  false .    vectorReorder  Boolean  Enable reordering of vector layers in map and Layer Control. Default is  false .    vectorLabel  Mixed  Label for vector layers. Default is  false . Pass the label or html for quick easy custom styling of label text.    overlayReorder  Boolean  Enable reordering of overlay layers in map and Layer Control. Default is  false .    overlayLabel  Mixed  Label for overlay layers. Default is  false . Pass the label or html for quick easy custom styling of label text.    noLegend  Boolean  When  true  no legend is created for all layers. Can be overridden for specific layer(s) with `noLegend' layer option.    noZoom  Boolean  When  true  removes \"Zoom to Layer\" menu item for all layers. Can be overridden for specific layer(s) with `noZoom' layer option.    noTransparency  Boolean  When  true  removes \"Transparency\" menu item for all layers. Can be overridden for specific layer(s) with `noTransparency' layer option.    swipe  Boolean  When  true  adds \"Layer Swipe\" menu item for all layers.  Can be overridden for specific layer(s) with  swipe  layer option.    swiperButtonStyle  String  CSS for positioning \"Exit Layer Swipe\" button in the map. Must include  position:absolute;  and a  z-index . Default is  position:absolute;top:20px;left:120px;z-index:50; .",
            "title": "Widget Construction Parameters"
        },
        {
            "location": "/widgets/LayerControl/#methods",
            "text": "Method  Description      showAllLayers()  Turn all layers on.    hideAllLayers()  Turn all layers off.",
            "title": "Methods"
        },
        {
            "location": "/widgets/LayerControl/#layerinfos",
            "text": "The  layerInfo  object contains configuration options for each layer control. LayerControl initializes each layer control using these parameters.  {\n    layer: layer,\n    type: 'dynamic',\n    title: 'EPA TMDL 303d Reaches',\n    controlOptions: {\n        // see Control Options\n    }\n}",
            "title": "LayerInfos"
        },
        {
            "location": "/widgets/LayerControl/#layerinfo-parameters",
            "text": "Parameter  Type  Description      layer  Mixed  A layer object OR layer id string.    type  String  Supports  dynamic ,  tiled ,  image  and  feature . Additional layer types coming soon.    title  String  Title for the control. When loaded with CMV's widget loader this is the  title  option for the layer.    controlOptions  Object  Additional options for the layer control. See Control Options.",
            "title": "LayerInfo Parameters"
        },
        {
            "location": "/widgets/LayerControl/#control-options",
            "text": "All layer types have common options while some options are specific to certain layer types. All  controlOptions  are Boolean except for  subLayerMenu , which is an object.     Option  Description  Affects      exclude  When  true  a layer control will not be added to the widget. Using  exclude  for a layer with layer reordering enabled which is not above or below all included layers will result in layer reordering issues.  all layers    noLegend  When  true  no legend is created. Set to  false  to override  noLegend: true  widget parameter.  dynamic, feature and tiled    noZoom  When  true  removes \"Zoom to Layer\" menu item. Set to  false  to override  noZoom: true  widget parameter.  all layers    noTransparency  When  true  removes \"Transparency\" menu item. Set to  false  to override  noTransparency: true  widget parameter.  all layers    swipe  When  true  adds \"Layer Swipe\" menu item. Set to  false  to override  swipe: true  widget parameter.  all layers    swipeScope  When  true  adds Scope option to Layer Swipe menu. Default is  false .     expanded  When  true  expands top level exposing sublayers or legend.  dynamic, feature   tiled    sublayers  When  false  dynamic folder/sublayer structure is not created.  dynamic    metadataUrl  When  true  and layer has  url  property (ArcGIS layers) links to service URL. When a URL links to said URL.  all layers    allSublayerToggles  When  false  toggle all sublayers on/off layer menu items will not be included.  dynamic    subLayerMenu  An object consisting of a key value pairs where they key is a layer type and the value is an array of menu items  All layers of type key given",
            "title": "Control Options"
        },
        {
            "location": "/widgets/LayerControl/#sub-layer-menu-items",
            "text": "Dynamic sublayers can have their own menu. The menu system is set up using dojo/topic so that another widget can listen to when a menu item is clicked, and manipulate or add functionality to the app. Each menu item in the array will apply to each layer of the type specified in the key. Each menu item inside the array has the following properties:\n-  label  - the string to display in the menu item\n-  iconClass  - the font awesome icon class to add to the menu\n-  topic  - the topic to publish when the menu item is clicked (see topics below)   subLayerMenu: {\n  dynamic: [{\n      label: 'Query Layer...',\n      iconClass: 'fa fa-search fa-fw',\n      topic: 'queryLayer'\n  }, {\n      label: 'Open Attribute Table',\n      topic: 'openTable',\n      iconClass: 'fa fa-table fa-fw'\n  }]\n }\n}  The menu can be completely overridden on a per layer basis also using the layers'  layerControlLayerInfos.menu  property. The  menu  property is an array of menu items.  layerControlLayerInfos: {\n menu: [{\n      label: 'Query Layer...',\n      iconClass: 'fa fa-search fa-fw',\n      topic: 'queryLayer'\n  }, {\n      label: 'Open Attribute Table',\n      topic: 'openTable',\n      iconClass: 'fa fa-table fa-fw'\n  }]\n}",
            "title": "Sub Layer Menu Items"
        },
        {
            "location": "/widgets/LayerControl/#topics",
            "text": "Subscribe to any of the following topics. CMV aims to please, so let us know if you would like a topic published for a particular user action, or layer/layer control state change.  layerControl/layerToggle  is published when layer visibility changes via the layer checkbox.  topic.subscribe('layerControl/layerToggle', function (r) {\n    console.log(r.id); //layer id\n    console.log(r.visible); //layer visibility (true/false)\n});  layerControl/setVisibleLayers  is published when visible layers are set on a dynamic layer.  topic.subscribe('layerControl/setVisibleLayers', function (r) {\n    console.log(r.id); //layer id\n    console.log(r.visibleLayers); //array of set visible layer ids\n});  layerControl/menuItemTopic  is published when a dynamic sublayer menu item is clicked.  topic.subscribe('layerControl/menuItemTopic', function (r) {\n    console.log(r.layer); //layer id\n    console.log(r.subLayer); //array of set visible layer ids\n    console.log(r.iconNode); //a domNode to toggle font awesome classes on\n    console.log(r.menuItem); //the clicked menu item object in case you want to modify it\n\n    //modify the iconNode to show that something happened to this layer\n    if (r.iconNode) {\n        if (domClass.contains(r.iconNode, 'fa-fire')) {\n            domClass.remove(r.iconNode, 'fa-fire');\n        } else {\n            domClass.add(r.iconNode, 'fa-fire');\n        }\n    }\n});",
            "title": "Topics"
        },
        {
            "location": "/widgets/Legend/",
            "text": "Legend\n\n\nExample Config Object\n\n\nlegend: {\n    include: true,\n    id: 'legend',\n    type: 'titlePane',\n    path: 'esri/dijit/Legend',\n    title: 'Legend',\n    open: false,\n    position: 0,\n    options: {\n        map: true,\n        legendLayerInfos: true\n    }\n},",
            "title": "Legend"
        },
        {
            "location": "/widgets/Legend/#legend",
            "text": "",
            "title": "Legend"
        },
        {
            "location": "/widgets/Legend/#example-config-object",
            "text": "legend: {\n    include: true,\n    id: 'legend',\n    type: 'titlePane',\n    path: 'esri/dijit/Legend',\n    title: 'Legend',\n    open: false,\n    position: 0,\n    options: {\n        map: true,\n        legendLayerInfos: true\n    }\n},",
            "title": "Example Config Object"
        },
        {
            "location": "/widgets/LocateButton/",
            "text": "Locate Button\n\n\nThis widget is a wrapper around \nLocateButton\n.\nCenters map to user's location. You can suppress GPS data that will appear in a \nInfoTemplate\n\n\nExample Config Object\n\n\nlocateButton: {\n   include: true,\n   id: 'locateButton',\n   type: 'domNode',\n   path: 'gis/dijit/LocateButton',\n   srcNodeRef: 'locateButton',\n   options: {\n      map: true,\n      scale: 2400 /* https://developers.arcgis.com/javascript/jsapi/locatebutton-amd.html#scale */\n      // show GPS data in a InfoTemplate\n      publishGPSPosition: true,\n      highlightLocation: true,\n      // move map when new GPS location is obtained\n      useTracking: true,\n      // uncomment the next block if you want the user's location to appear on the map when app loads\n      // end-user may have to allow permissions within the browser to interact with app's location request\n      /*startup: function(){\n            this.locate();\n      },*/\n      geolocationOptions: {\n         maximumAge: 0,\n         timeout: 15000,\n         enableHighAccuracy: true\n      }\n   }\n}",
            "title": "Locate Button"
        },
        {
            "location": "/widgets/LocateButton/#locate-button",
            "text": "This widget is a wrapper around  LocateButton .\nCenters map to user's location. You can suppress GPS data that will appear in a  InfoTemplate",
            "title": "Locate Button"
        },
        {
            "location": "/widgets/LocateButton/#example-config-object",
            "text": "locateButton: {\n   include: true,\n   id: 'locateButton',\n   type: 'domNode',\n   path: 'gis/dijit/LocateButton',\n   srcNodeRef: 'locateButton',\n   options: {\n      map: true,\n      scale: 2400 /* https://developers.arcgis.com/javascript/jsapi/locatebutton-amd.html#scale */\n      // show GPS data in a InfoTemplate\n      publishGPSPosition: true,\n      highlightLocation: true,\n      // move map when new GPS location is obtained\n      useTracking: true,\n      // uncomment the next block if you want the user's location to appear on the map when app loads\n      // end-user may have to allow permissions within the browser to interact with app's location request\n      /*startup: function(){\n            this.locate();\n      },*/\n      geolocationOptions: {\n         maximumAge: 0,\n         timeout: 15000,\n         enableHighAccuracy: true\n      }\n   }\n}",
            "title": "Example Config Object"
        },
        {
            "location": "/widgets/MapInfo/",
            "text": "Map Info\n\n\nMap Info is a simple widget for displaying mouse coordinates. Optionally map scale and zoom level can also be displayed.\n\n\nHTML\n\n\nCMV includes a dom node for the widget in \nmapOverlay.html\n:\n\n\ndiv style=\nposition:absolute;bottom:0;left:0;z-index:40;\n\n    \ndiv id=\nmapInfoDijit\n\n    \n/div\n\n\n/div\n\n\n\n\n\nConfig\n\n\nIn \nviewer/config.js\n:\n\n\nmapInfo: {\n    include: true,\n    id: 'mapInfo',\n    type: 'domNode',\n    path: 'gis/dijit/MapInfo',\n    srcNodeRef: 'mapInfoDijit',\n    options: {\n        map: true, //required\n        mode: 'dms', //'map', 'dec' or 'dms'\n        firstCoord: 'y', //which coord to display first ('x')\n        unitScale: 2, //coord decimal places (2)(affects seconds in 'dms' format)\n        showScale: true, //show map scale (false)\n        showZoom: false, //show zoom level (false)\n        xLabel: 'X:', //label for x coord ('X:')\n        yLabel: 'Y:', //label for y coord ('Y:')\n        scaleLabel: '1:', //label for map scale ('1:')\n        zoomLabel: 'Z', //label for zoom level ('Z')\n        minWidth: 286, //minimum width in pixels of widget (0)(when 0 widget fits content)\n        proj4Catalog: 'EPSG', //'ESRI', 'EPSG' or 'SR-ORG' **\n        proj4Wkid: 2992 //wkid of the map **\n    }\n}\n\n\n\n\nDefaults are shown in parenthesis.\n\n\n** \nproj4Catalog\n and \nproj4Wkid\n are only used and required when using a non Web Mercator or WGS projection and mode is \ndec\n or \ndms\n.\n\n\nCSS\n\n\nMapInfo loads its own CSS and can be found in \njs/gis/dijit/MapInfo/css/MapInfo.css",
            "title": "Map Info"
        },
        {
            "location": "/widgets/MapInfo/#map-info",
            "text": "Map Info is a simple widget for displaying mouse coordinates. Optionally map scale and zoom level can also be displayed.",
            "title": "Map Info"
        },
        {
            "location": "/widgets/MapInfo/#html",
            "text": "CMV includes a dom node for the widget in  mapOverlay.html :  div style= position:absolute;bottom:0;left:0;z-index:40; \n     div id= mapInfoDijit \n     /div  /div",
            "title": "HTML"
        },
        {
            "location": "/widgets/MapInfo/#config",
            "text": "In  viewer/config.js :  mapInfo: {\n    include: true,\n    id: 'mapInfo',\n    type: 'domNode',\n    path: 'gis/dijit/MapInfo',\n    srcNodeRef: 'mapInfoDijit',\n    options: {\n        map: true, //required\n        mode: 'dms', //'map', 'dec' or 'dms'\n        firstCoord: 'y', //which coord to display first ('x')\n        unitScale: 2, //coord decimal places (2)(affects seconds in 'dms' format)\n        showScale: true, //show map scale (false)\n        showZoom: false, //show zoom level (false)\n        xLabel: 'X:', //label for x coord ('X:')\n        yLabel: 'Y:', //label for y coord ('Y:')\n        scaleLabel: '1:', //label for map scale ('1:')\n        zoomLabel: 'Z', //label for zoom level ('Z')\n        minWidth: 286, //minimum width in pixels of widget (0)(when 0 widget fits content)\n        proj4Catalog: 'EPSG', //'ESRI', 'EPSG' or 'SR-ORG' **\n        proj4Wkid: 2992 //wkid of the map **\n    }\n}  Defaults are shown in parenthesis.  **  proj4Catalog  and  proj4Wkid  are only used and required when using a non Web Mercator or WGS projection and mode is  dec  or  dms .",
            "title": "Config"
        },
        {
            "location": "/widgets/MapInfo/#css",
            "text": "MapInfo loads its own CSS and can be found in  js/gis/dijit/MapInfo/css/MapInfo.css",
            "title": "CSS"
        },
        {
            "location": "/widgets/Measurement/",
            "text": "Measurement\n\n\nExample Config Object\n\n\nmeasure: {\n    include: true,\n    id: 'measurement',\n    type: 'titlePane',\n    path: 'gis/dijit/Measurement',\n    title: 'Measurement',\n    open: false,\n    position: 5,\n    options: {\n        map: true,\n        mapClickMode: true,\n        defaultAreaUnit: units.SQUARE_MILES,\n        defaultLengthUnit: units.MILES\n    }\n},",
            "title": "Measurement"
        },
        {
            "location": "/widgets/Measurement/#measurement",
            "text": "",
            "title": "Measurement"
        },
        {
            "location": "/widgets/Measurement/#example-config-object",
            "text": "measure: {\n    include: true,\n    id: 'measurement',\n    type: 'titlePane',\n    path: 'gis/dijit/Measurement',\n    title: 'Measurement',\n    open: false,\n    position: 5,\n    options: {\n        map: true,\n        mapClickMode: true,\n        defaultAreaUnit: units.SQUARE_MILES,\n        defaultLengthUnit: units.MILES\n    }\n},",
            "title": "Example Config Object"
        },
        {
            "location": "/widgets/OverviewMap/",
            "text": "Overview Map\n\n\nExample Config Object\n\n\noverviewMap: {\n    include: true,\n    id: 'overviewMap',\n    type: 'map',\n    path: 'esri/dijit/OverviewMap',\n    options: {\n        map: true,\n               // location overview map will appear on Map object \n        attachTo: 'bottom-right',\n        color: '#0000CC',\n        height: 100,\n        width: 125,\n        opacity: 0.30,\n        visible: false\n    }\n},",
            "title": "Overview Map"
        },
        {
            "location": "/widgets/OverviewMap/#overview-map",
            "text": "",
            "title": "Overview Map"
        },
        {
            "location": "/widgets/OverviewMap/#example-config-object",
            "text": "overviewMap: {\n    include: true,\n    id: 'overviewMap',\n    type: 'map',\n    path: 'esri/dijit/OverviewMap',\n    options: {\n        map: true,\n               // location overview map will appear on Map object \n        attachTo: 'bottom-right',\n        color: '#0000CC',\n        height: 100,\n        width: 125,\n        opacity: 0.30,\n        visible: false\n    }\n},",
            "title": "Example Config Object"
        },
        {
            "location": "/widgets/Print/",
            "text": "Print\n\n\nExample Config Object\n\n\nprint: {\n    include: true,\n    id: 'print',\n    type: 'titlePane',\n    path: 'gis/dijit/Print',\n    title: 'Print',\n    open: false,\n    position: 6,\n    options: {\n        map: true,\n        printTaskURL: 'http://sampleserver6.arcgisonline.com/arcgis/rest/services/Utilities/PrintingTools/GPServer/Export%20Web%20Map%20Task',\n        copyrightText: 'Copyright 2014',\n        authorText: 'Me',\n        defaultTitle: 'Viewer Map',\n        defaultFormat: 'PDF',\n        defaultLayout: 'Letter ANSI A Landscape',\n        resultOrder: 'last' // can be first or last\n    }\n},",
            "title": "Print"
        },
        {
            "location": "/widgets/Print/#print",
            "text": "",
            "title": "Print"
        },
        {
            "location": "/widgets/Print/#example-config-object",
            "text": "print: {\n    include: true,\n    id: 'print',\n    type: 'titlePane',\n    path: 'gis/dijit/Print',\n    title: 'Print',\n    open: false,\n    position: 6,\n    options: {\n        map: true,\n        printTaskURL: 'http://sampleserver6.arcgisonline.com/arcgis/rest/services/Utilities/PrintingTools/GPServer/Export%20Web%20Map%20Task',\n        copyrightText: 'Copyright 2014',\n        authorText: 'Me',\n        defaultTitle: 'Viewer Map',\n        defaultFormat: 'PDF',\n        defaultLayout: 'Letter ANSI A Landscape',\n        resultOrder: 'last' // can be first or last\n    }\n},",
            "title": "Example Config Object"
        },
        {
            "location": "/widgets/Scalebar/",
            "text": "Scalebar\n\n\nscalebar\n\n\nSee \nClass : Scalebar\n for parameters\n\n\nExample Config Object\n\n\nscalebar: {\n    include: true,\n    id: 'scalebar',\n    type: 'map',\n    path: 'esri/dijit/Scalebar',\n    options: {\n        map: true,\n        attachTo: 'bottom-left',\n        scalebarStyle: 'line',\n        scalebarUnit: 'dual'\n    }\n},",
            "title": "Scalebar"
        },
        {
            "location": "/widgets/Scalebar/#scalebar",
            "text": "",
            "title": "Scalebar"
        },
        {
            "location": "/widgets/Scalebar/#scalebar_1",
            "text": "See  Class : Scalebar  for parameters",
            "title": "scalebar"
        },
        {
            "location": "/widgets/Scalebar/#example-config-object",
            "text": "scalebar: {\n    include: true,\n    id: 'scalebar',\n    type: 'map',\n    path: 'esri/dijit/Scalebar',\n    options: {\n        map: true,\n        attachTo: 'bottom-left',\n        scalebarStyle: 'line',\n        scalebarUnit: 'dual'\n    }\n},",
            "title": "Example Config Object"
        },
        {
            "location": "/widgets/StreetView/",
            "text": "StreetView\n\n\nExample Config Object\n\n\nstreetview: {\n    include: true,\n    id: 'streetview',\n    type: 'floating',\n    path: 'gis/dijit/StreetView',\n    title: 'Google Street View',\n    options: {\n        map: true,\n        mapClickMode: true,\n        openOnStartup: true\n    }\n}\n\n\n\n\nHost Your Own Projection File\n\n\nIf desired, you can load a projection file from your own server instead of using one from spatialreference.org \ni.e., http://YourServer/projections/102642.js. \n\n\nThis is necessary if your server cannot access external sites. \n\n\nThe following steps will guide you:\n\n\n\n\nGo to http://spatialreference.org/\n\n\nBrowse the reference you need, for example ESRI, http://spatialreference.org/ref/esri/\n\n\nSearch for your WKID, for example 102660, http://spatialreference.org/ref/esri/?search=102660\nsrtext=Search\n\n\nClick on the result you require, for the above search the result is http://spatialreference.org/ref/esri/102660/\n\n\nClick the Proj4js Format link, http://spatialreference.org/ref/esri/102660/proj4js/\n\n\nSave the file in *.js format on your server\n\n\nModify the line in \nviewer/js/gis/dijit/StreetView.js\n where \nproj4CustomURL:null,\n\n\nEnter your site address and the location of the file you saved above, \nproj4CustomURL: 'http://YourServer/projections/102660.js',",
            "title": "StreetView"
        },
        {
            "location": "/widgets/StreetView/#streetview",
            "text": "",
            "title": "StreetView"
        },
        {
            "location": "/widgets/StreetView/#example-config-object",
            "text": "streetview: {\n    include: true,\n    id: 'streetview',\n    type: 'floating',\n    path: 'gis/dijit/StreetView',\n    title: 'Google Street View',\n    options: {\n        map: true,\n        mapClickMode: true,\n        openOnStartup: true\n    }\n}",
            "title": "Example Config Object"
        },
        {
            "location": "/widgets/StreetView/#host-your-own-projection-file",
            "text": "If desired, you can load a projection file from your own server instead of using one from spatialreference.org \ni.e., http://YourServer/projections/102642.js.   This is necessary if your server cannot access external sites.   The following steps will guide you:   Go to http://spatialreference.org/  Browse the reference you need, for example ESRI, http://spatialreference.org/ref/esri/  Search for your WKID, for example 102660, http://spatialreference.org/ref/esri/?search=102660 srtext=Search  Click on the result you require, for the above search the result is http://spatialreference.org/ref/esri/102660/  Click the Proj4js Format link, http://spatialreference.org/ref/esri/102660/proj4js/  Save the file in *.js format on your server  Modify the line in  viewer/js/gis/dijit/StreetView.js  where  proj4CustomURL:null,  Enter your site address and the location of the file you saved above,  proj4CustomURL: 'http://YourServer/projections/102660.js',",
            "title": "Host Your Own Projection File"
        },
        {
            "location": "/contribute/",
            "text": "Contributing to the Project\n\n\nThere are many ways to contribute to CMV:\n\n\n\n\n\n\nTell your friends and colleagues\n - We are a community of developers. Help spread the CMV love and help the community grow.\n\n\n\n\n\n\nCreate documentation\n This documentation is a living document that is updated frequently by the community. Please feel free to suggest changes in the \ndocumentation issues list\n.\n\n\n\n\n\n\nAnswer Questions at Stack Exchange\n - \ngis.stackexchange.com\n is the prime destination for our \nFrequently Asked Questions (FAQs)\n. Please answer questions and help new developers get more comfortable with CMV.\n\n\n\n\n\n\nJoin the Chat Room\n - Lots of us in CMV community hang out in the \nchat room on Gitter\n. Feel free to hangout with us, answer questions and throw out ideas.\n\n\n\n\n\n\nUser contributed widgets\n - For general information on how to build a CMV widget read \nBuilding Custom Widgets\n. Users can submit widgets to the \ncmv-contrib-widgets\n repo. These widgets are created and submitted by users. Head on over and read the details.\n\n\n\n\n\n\nPropose a Feature\n - If there is a feature you would like to request, add it to the \nissues list\n for consideration.\n\n\n\n\n\n\nSubmit an Issue\n - If you find a possible bug, please submit an issue in the \nissues log\n. Be sure to review the existing issues to avoid duplication.\n\n\n\n\n\n\nSubmit a Pull Request\n - If you are developer and have an enhancement or bug fix you would like to submit to CMV, pull requests are welcome. Please review the the documentation on \nContributing on GitHub\n before submitting any Pull Requests.",
            "title": "Introduction"
        },
        {
            "location": "/contribute/#contributing-to-the-project",
            "text": "There are many ways to contribute to CMV:    Tell your friends and colleagues  - We are a community of developers. Help spread the CMV love and help the community grow.    Create documentation  This documentation is a living document that is updated frequently by the community. Please feel free to suggest changes in the  documentation issues list .    Answer Questions at Stack Exchange  -  gis.stackexchange.com  is the prime destination for our  Frequently Asked Questions (FAQs) . Please answer questions and help new developers get more comfortable with CMV.    Join the Chat Room  - Lots of us in CMV community hang out in the  chat room on Gitter . Feel free to hangout with us, answer questions and throw out ideas.    User contributed widgets  - For general information on how to build a CMV widget read  Building Custom Widgets . Users can submit widgets to the  cmv-contrib-widgets  repo. These widgets are created and submitted by users. Head on over and read the details.    Propose a Feature  - If there is a feature you would like to request, add it to the  issues list  for consideration.    Submit an Issue  - If you find a possible bug, please submit an issue in the  issues log . Be sure to review the existing issues to avoid duplication.    Submit a Pull Request  - If you are developer and have an enhancement or bug fix you would like to submit to CMV, pull requests are welcome. Please review the the documentation on  Contributing on GitHub  before submitting any Pull Requests.",
            "title": "Contributing to the Project"
        },
        {
            "location": "/contribute/BuildingCustomWidgets/",
            "text": "Building Custom Widgets\n\n\nOverview\n\n\nThis application has been designed with the the goal of allowing users (a.ka. App Admins) to configure widgets without having to write code. Programmers can add new configurable widgets, by following the rules required to fit in to the viewer framework. Knowledge of [ESRI's JavaScript API] (https://developers.arcgis.com/javascript/) and [dojo] (https://developers.arcgis.com/javascript/jshelp/inside_dojo.html) are required.\n\n\nSummary of Steps\n\n\n\n\nCreate a new widget \nviewer/js/gis/dijit/Widget.js\n\n\nCreate any dependent widget folders (optional) in \nviewer/js/gis/dijit/Widget\n \n\n\nviewer/js/gis/dijit/Widget/templates/Widget.html\n\n\nviewer/js/gis/dijit/Widget/css/Widget.css\n\n\nviewer/js/gis/dijit/Widget/images/WidgetPicture.png\n\n\nIf your widget offers widget specific configurations for the App Admin to utilize then create a config file in \nviewer/js/config/widget.js\n\n\n\n\nNote\n the naming convention used for consistency across core CMV widgets and contributed widgets. Use proper case name for the widget here \nviewer/js/gis/dijit/Widget.js\n and lowercase name for the supporting configuration file here \nviewer/js/config/widget.js\n\n\nWidget Configuration\n\n\nAll widgets are configured by the App Admin in [viewer/js/config/viewer.js] (https://github.com/cmv/cmv-app/blob/master/viewer/js/config/viewer.js). Optional supporting widget configuration files that you as the developer provide can be configured by the App Admin here \nviewer/js/config/widget.js\n.\n\n\nThe \nviewer.js\n passes \ninherited properties\n as well as your widget specific properties by way of \nviewer/js/viewer/Controller.js\n. You will not need to modify \nviewer/js/viewer/Controller.js\n. This file does the heavy lifting of incorporating your widget into CMV.\n\n\nWidget Definition\n\n\nRefer to existing core CMV widgets to help you build your new widget. The skeleton of a widget is as follows.\n\n\ndefine([\n    \"dojo/_base/declare\",\n    \"dijit/_WidgetBase\",\n    \"dijit/_TemplatedMixin\",\n    \"dojo/text!./templates/MyWidget.html\"\n], function(declare, _WidgetBase, _TemplatedMixin, template) {\n\u00a0\n    return declare([_WidgetBase, _TemplatedMixin], {\n        templateString: template\n    });\n});\n\n\n\nUseful Resources\n\n\nThese links are helpful for those unfamiliar with dijits.\n\n \nCreating Custom Widgets\n\n\n \nCreating templated widgets\n\n* \nESRI custom widget tutorial",
            "title": "Building Custom Widgets"
        },
        {
            "location": "/contribute/BuildingCustomWidgets/#building-custom-widgets",
            "text": "",
            "title": "Building Custom Widgets"
        },
        {
            "location": "/contribute/BuildingCustomWidgets/#overview",
            "text": "This application has been designed with the the goal of allowing users (a.ka. App Admins) to configure widgets without having to write code. Programmers can add new configurable widgets, by following the rules required to fit in to the viewer framework. Knowledge of [ESRI's JavaScript API] (https://developers.arcgis.com/javascript/) and [dojo] (https://developers.arcgis.com/javascript/jshelp/inside_dojo.html) are required.",
            "title": "Overview"
        },
        {
            "location": "/contribute/BuildingCustomWidgets/#summary-of-steps",
            "text": "Create a new widget  viewer/js/gis/dijit/Widget.js  Create any dependent widget folders (optional) in  viewer/js/gis/dijit/Widget    viewer/js/gis/dijit/Widget/templates/Widget.html  viewer/js/gis/dijit/Widget/css/Widget.css  viewer/js/gis/dijit/Widget/images/WidgetPicture.png  If your widget offers widget specific configurations for the App Admin to utilize then create a config file in  viewer/js/config/widget.js   Note  the naming convention used for consistency across core CMV widgets and contributed widgets. Use proper case name for the widget here  viewer/js/gis/dijit/Widget.js  and lowercase name for the supporting configuration file here  viewer/js/config/widget.js",
            "title": "Summary of Steps"
        },
        {
            "location": "/contribute/BuildingCustomWidgets/#widget-configuration",
            "text": "All widgets are configured by the App Admin in [viewer/js/config/viewer.js] (https://github.com/cmv/cmv-app/blob/master/viewer/js/config/viewer.js). Optional supporting widget configuration files that you as the developer provide can be configured by the App Admin here  viewer/js/config/widget.js .  The  viewer.js  passes  inherited properties  as well as your widget specific properties by way of  viewer/js/viewer/Controller.js . You will not need to modify  viewer/js/viewer/Controller.js . This file does the heavy lifting of incorporating your widget into CMV.",
            "title": "Widget Configuration"
        },
        {
            "location": "/contribute/BuildingCustomWidgets/#widget-definition",
            "text": "Refer to existing core CMV widgets to help you build your new widget. The skeleton of a widget is as follows.  define([\n    \"dojo/_base/declare\",\n    \"dijit/_WidgetBase\",\n    \"dijit/_TemplatedMixin\",\n    \"dojo/text!./templates/MyWidget.html\"\n], function(declare, _WidgetBase, _TemplatedMixin, template) {\n\u00a0\n    return declare([_WidgetBase, _TemplatedMixin], {\n        templateString: template\n    });\n});",
            "title": "Widget Definition"
        },
        {
            "location": "/contribute/BuildingCustomWidgets/#useful-resources",
            "text": "These links are helpful for those unfamiliar with dijits.   Creating Custom Widgets    Creating templated widgets \n*  ESRI custom widget tutorial",
            "title": "Useful Resources"
        },
        {
            "location": "/contribute/ContributingOnGitHub/",
            "text": "Contributing on GitHub\n\n\nEnhancements and bug fixes from the user community are essential for keeping CMV great. We want to keep it as easy as possible to contribute changes. There are a few guidelines that we need contributors to follow so that we can have a chance of keeping on top of things.\n\n\nGetting Started\n\n\n\n\n\n\nMake sure you have a \nGitHub account\n.\n\n\n\n\n\n\nFork the repository on GitHub\n\n\n\n\n\n\nMaking Changes\n\n\n\n\n\n\nThrough \nGitHub issues\n, or through the #cmv IRC channel on freenode.org, you talk about a feature you would like to see (or a bug), and why it should be in CMV.\n\n\n\n\n\n\nThere is also a \ngitter.im chatroom\n, stop by sometime!\n\n\n\n\n\n\nCreate a topic branch from where you want to base your work.\n\n\n\n\n\n\nThis is the \ndevelop\n branch.\n\n\n\n\n\n\nTo quickly create a topic branch based on develop; git checkout -b fix/my_contribution develop. Please avoid working directly on the master branch.\n\n\n\n\n\n\n\n\n\n\nMake commits of logical units.\n\n\n\n\n\n\nTest your changes and please help us out by updating and implementing some automated tests if possible.\n\n\n\n\n\n\nCheck for unnecessary whitespace with \ngit diff --check\n before committing.\n\n\n\n\n\n\nMake sure your commit messages are in the proper format.\n    (Example?)\n\n\n\n\n\n\nSubmitting Changes\n\n\n\n\n\n\nPush your changes to a topic branch in your fork of the repository.\n\n\n\n\n\n\nOnce you feel it is ready, submit the pull request to the cmv/cmv-app repository against the 'develop' branch (\nmore information on this can be found here\n).\n\n\n\n\n\n\nIn the pull request, outline what you did and point to specific conversations (as in URL's) and issues that you are are resolving. This is a tremendous help for us in evaluation and acceptance.\n\n\n\n\n\n\nOnce the pull request is in, please do not delete the branch or close the pull request (unless something is wrong with it).\n\n\n\n\n\n\nOne of the members will evaluate it within a reasonable time period (which is to say usually within 2-4 weeks). Some things get evaluated faster or fast tracked. We are human and we have active lives outside of open source so don't fret if you haven't seen any activity on your pull request within a month or two. We don't have a Service Level Agreement (SLA) for pull requests. Just know that we will evaluate your pull request.\n\n\n\n\n\n\nIf we have comments or questions when we do evaluate it and receive no response, it will probably lessen the chance of getting accepted.The core team looks at Pull Requests on a regular basis.\n\n\n\n\n\n\nAfter feedback has been given we expect responses within a reasonable time frame (2-4 weeks). After that time frame, we may close the pull request if it isn't showing any activity.\n\n\n\n\n\n\nIf you reformat code or change core functionality without an approval from a person on the CMV team, it's likely that no matter how awesome it looks afterwards, it will probably not get accepted. Reformatting code makes it harder for us to evaluate exactly what was changed.\n\n\n\n\n\n\nIf you do these things, it will be make evaluation and acceptance easy. Now if you stray outside of the guidelines we have above, it doesn't mean we are going to ignore your pull request. It will just make things harder for us. Harder for us roughly translates to a longer time to acceptance of your pull request.\n\n\n\n\n\n\nAdditional Resources\n\n\n\n\nGuide for CMV Committers\n\n\nGeneral GitHub documentation\n\n\nGitHub pull request documentation\n\n\nGitter.im Chat Room",
            "title": "Submitting a Pull Request"
        },
        {
            "location": "/contribute/ContributingOnGitHub/#contributing-on-github",
            "text": "Enhancements and bug fixes from the user community are essential for keeping CMV great. We want to keep it as easy as possible to contribute changes. There are a few guidelines that we need contributors to follow so that we can have a chance of keeping on top of things.",
            "title": "Contributing on GitHub"
        },
        {
            "location": "/contribute/ContributingOnGitHub/#getting-started",
            "text": "Make sure you have a  GitHub account .    Fork the repository on GitHub",
            "title": "Getting Started"
        },
        {
            "location": "/contribute/ContributingOnGitHub/#making-changes",
            "text": "Through  GitHub issues , or through the #cmv IRC channel on freenode.org, you talk about a feature you would like to see (or a bug), and why it should be in CMV.    There is also a  gitter.im chatroom , stop by sometime!    Create a topic branch from where you want to base your work.    This is the  develop  branch.    To quickly create a topic branch based on develop; git checkout -b fix/my_contribution develop. Please avoid working directly on the master branch.      Make commits of logical units.    Test your changes and please help us out by updating and implementing some automated tests if possible.    Check for unnecessary whitespace with  git diff --check  before committing.    Make sure your commit messages are in the proper format.\n    (Example?)",
            "title": "Making Changes"
        },
        {
            "location": "/contribute/ContributingOnGitHub/#submitting-changes",
            "text": "Push your changes to a topic branch in your fork of the repository.    Once you feel it is ready, submit the pull request to the cmv/cmv-app repository against the 'develop' branch ( more information on this can be found here ).    In the pull request, outline what you did and point to specific conversations (as in URL's) and issues that you are are resolving. This is a tremendous help for us in evaluation and acceptance.    Once the pull request is in, please do not delete the branch or close the pull request (unless something is wrong with it).    One of the members will evaluate it within a reasonable time period (which is to say usually within 2-4 weeks). Some things get evaluated faster or fast tracked. We are human and we have active lives outside of open source so don't fret if you haven't seen any activity on your pull request within a month or two. We don't have a Service Level Agreement (SLA) for pull requests. Just know that we will evaluate your pull request.    If we have comments or questions when we do evaluate it and receive no response, it will probably lessen the chance of getting accepted.The core team looks at Pull Requests on a regular basis.    After feedback has been given we expect responses within a reasonable time frame (2-4 weeks). After that time frame, we may close the pull request if it isn't showing any activity.    If you reformat code or change core functionality without an approval from a person on the CMV team, it's likely that no matter how awesome it looks afterwards, it will probably not get accepted. Reformatting code makes it harder for us to evaluate exactly what was changed.    If you do these things, it will be make evaluation and acceptance easy. Now if you stray outside of the guidelines we have above, it doesn't mean we are going to ignore your pull request. It will just make things harder for us. Harder for us roughly translates to a longer time to acceptance of your pull request.",
            "title": "Submitting Changes"
        },
        {
            "location": "/contribute/ContributingOnGitHub/#additional-resources",
            "text": "Guide for CMV Committers  General GitHub documentation  GitHub pull request documentation  Gitter.im Chat Room",
            "title": "Additional Resources"
        },
        {
            "location": "/contribute/Committers/",
            "text": "Guide for committing changes to CMV\n\n\nWe would like to make it easier for community members to contribute to CMV using pull requests, even if it makes the task of reviewing and committing these changes a little harder. Pull requests are only ever based on a single branch, however, we maintain more than one active branch. As a result contributors should target their changes at the \ndevelop\n branch. This makes the process of contributing a little easier for the contributor since they don't need to concern themselves with the question, \"What branch do I base my changes on?\" This is already called out in \nContributing On GitHub\n.\n\n\nTherefore, it is the responsibility of the committer to re-base the change set on the appropriate branch which should receive the contribution.\n\n\nIt is also the responsibility of the committer to review the change set in an effort to make sure the end users must opt-in to new behavior that is incompatible with previous behavior. Finally, it is the responsibility of the committer to make sure the develop and master branches are both clean and working at all times. Clean means that dead code is not allowed, everything needs to be usable in some manner at all points in time. \n\n\nThe rest of this document addresses the concerns of the committer. This document will help guide the committer decide which branch to base, or re-base a contribution on top of. This document also describes our branch management strategy, which is closely related to the decision of what branch to commit changes into.\n\n\nTerminology\n\n\nMany of these terms have more than one meaning. For the purposes of this document, the following terms refer to specific things.\n\n\ncontributor\n - A person who makes a change to CMV and submits a change set in the form of a pull request.\n\n\nchange set\n - A set of discrete patches which combined together form a contribution. A change set takes the form of Git commits and is submitted to CMV in the form of a pull request.\n\n\ncommitter\n - A person responsible for reviewing a pull request and then making the decision what base branch to merge the change set into.\n\n\ndevelop branch\n - The branch where new functionality that are not bug fixes is merged.\n\n\nmaster branch\n - The branch where bug fixes against the latest release or release candidate are merged.\n\n\nReview Process\n\n\nThis section provides a guide to follow while committing change sets to cmv base branches.\n\n\nThe process is as follows:\n\n\n\n\n\n\nA contributor sends a pull request (usually against \ndevelop\n branch).\n\n\n\n\n\n\nA committer typically reviews it within a week or two to determine the feasibility of the changes.\n\n\n\n\n\n\nIn all cases politeness goes a long way. Please thank folks for contributions - they are going out of their way to help make the code base better, or adding something they may personally feel is necessary for the code base.\n\n\n\n\n\n\nInitial gotcha's to check for:\n\n\n\n\n\n\nDid the user create a branch with these changes? If it is on their master, please ask them to review the contributing document.\n\n\n\n\n\n\nDid the user reformat files and they should not have? Was is just white-space? You can try adding ?w=1 to the URL on GitHub.\n\n\n\n\n\n\nAre there tests? Tests for new functionality are not required by highly desirable. Consider ask the contributor to review the contributing document and provide tests.\n\n\n\n\n\n\nIs the code documented properly? Does this additional set of changes require changes to the wiki or documentation?\n\n\n\n\n\n\nWas this code warranted? Did the contributor follow the process of gaining approval for big change sets? If not please have them review the contributing document and ask that they follow up with a case for putting the code into the code base on the mailing list.\n\n\n\n\n\n\n\n\n\n\nReview the code:\n\n\n\n\n\n\nDoes the code meet the naming conventions and formatting?\n\n\n\n\n\n\nIs the code sound? Does it read well? Can you understand what it is doing without having to execute it? Principal of no clever hacks (need link).\n\n\n\n\n\n\nDoes the code do what the purpose of the pull request is for?\n\n\n\n\n\n\n\n\n\n\nOnce you have reviewed the initial items, and are not waiting for additional feedback or work by the contributor, give the thumbs up that it is ready for the next part of the process (merging).\n\n\n\n\n\n\nUnless there is something wrong with the code, we don't ask contributors to try to stay in sync with develop branch. They did the work to create the patch in the first place, asking them to unnecessarily come back and try to keep their code synced up with develop is not an acceptable process.\n\n\n\n\n\n\nMerging\n\n\nOnce you have reviewed the change set and determined it is ready for merge, the next steps are to bring it local and evaluate the code further by actually working with it, running any tests locally and adding any additional commits or fix-ups that are necessary in a local branch.\n\n\nWhen merging the user's contribution, it should be done with git merge --no-ff to create a merge commit so that in case there is an issue it becomes easier to revert later, and so that we can see where the code came from should we ever need to go find it later (more information on this can be found here and also a discussion on why this is a good idea here).",
            "title": "Committing Changes to CMV"
        },
        {
            "location": "/contribute/Committers/#guide-for-committing-changes-to-cmv",
            "text": "We would like to make it easier for community members to contribute to CMV using pull requests, even if it makes the task of reviewing and committing these changes a little harder. Pull requests are only ever based on a single branch, however, we maintain more than one active branch. As a result contributors should target their changes at the  develop  branch. This makes the process of contributing a little easier for the contributor since they don't need to concern themselves with the question, \"What branch do I base my changes on?\" This is already called out in  Contributing On GitHub .  Therefore, it is the responsibility of the committer to re-base the change set on the appropriate branch which should receive the contribution.  It is also the responsibility of the committer to review the change set in an effort to make sure the end users must opt-in to new behavior that is incompatible with previous behavior. Finally, it is the responsibility of the committer to make sure the develop and master branches are both clean and working at all times. Clean means that dead code is not allowed, everything needs to be usable in some manner at all points in time.   The rest of this document addresses the concerns of the committer. This document will help guide the committer decide which branch to base, or re-base a contribution on top of. This document also describes our branch management strategy, which is closely related to the decision of what branch to commit changes into.",
            "title": "Guide for committing changes to CMV"
        },
        {
            "location": "/contribute/Committers/#terminology",
            "text": "Many of these terms have more than one meaning. For the purposes of this document, the following terms refer to specific things.  contributor  - A person who makes a change to CMV and submits a change set in the form of a pull request.  change set  - A set of discrete patches which combined together form a contribution. A change set takes the form of Git commits and is submitted to CMV in the form of a pull request.  committer  - A person responsible for reviewing a pull request and then making the decision what base branch to merge the change set into.  develop branch  - The branch where new functionality that are not bug fixes is merged.  master branch  - The branch where bug fixes against the latest release or release candidate are merged.",
            "title": "Terminology"
        },
        {
            "location": "/contribute/Committers/#review-process",
            "text": "This section provides a guide to follow while committing change sets to cmv base branches.  The process is as follows:    A contributor sends a pull request (usually against  develop  branch).    A committer typically reviews it within a week or two to determine the feasibility of the changes.    In all cases politeness goes a long way. Please thank folks for contributions - they are going out of their way to help make the code base better, or adding something they may personally feel is necessary for the code base.    Initial gotcha's to check for:    Did the user create a branch with these changes? If it is on their master, please ask them to review the contributing document.    Did the user reformat files and they should not have? Was is just white-space? You can try adding ?w=1 to the URL on GitHub.    Are there tests? Tests for new functionality are not required by highly desirable. Consider ask the contributor to review the contributing document and provide tests.    Is the code documented properly? Does this additional set of changes require changes to the wiki or documentation?    Was this code warranted? Did the contributor follow the process of gaining approval for big change sets? If not please have them review the contributing document and ask that they follow up with a case for putting the code into the code base on the mailing list.      Review the code:    Does the code meet the naming conventions and formatting?    Is the code sound? Does it read well? Can you understand what it is doing without having to execute it? Principal of no clever hacks (need link).    Does the code do what the purpose of the pull request is for?      Once you have reviewed the initial items, and are not waiting for additional feedback or work by the contributor, give the thumbs up that it is ready for the next part of the process (merging).    Unless there is something wrong with the code, we don't ask contributors to try to stay in sync with develop branch. They did the work to create the patch in the first place, asking them to unnecessarily come back and try to keep their code synced up with develop is not an acceptable process.",
            "title": "Review Process"
        },
        {
            "location": "/contribute/Committers/#merging",
            "text": "Once you have reviewed the change set and determined it is ready for merge, the next steps are to bring it local and evaluate the code further by actually working with it, running any tests locally and adding any additional commits or fix-ups that are necessary in a local branch.  When merging the user's contribution, it should be done with git merge --no-ff to create a merge commit so that in case there is an issue it becomes easier to revert later, and so that we can see where the code came from should we ever need to go find it later (more information on this can be found here and also a discussion on why this is a good idea here).",
            "title": "Merging"
        },
        {
            "location": "/about/license/",
            "text": "License\n\n\nThe Legal Stuff\n\n\nThe MIT License (MIT)\n\n\nCopyright (c) 2014 David Spriggs\n\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
            "title": "License"
        },
        {
            "location": "/about/license/#license",
            "text": "The Legal Stuff",
            "title": "License"
        },
        {
            "location": "/about/license/#the-mit-license-mit",
            "text": "Copyright (c) 2014 David Spriggs  Permission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:  The above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
            "title": "The MIT License (MIT)"
        },
        {
            "location": "/about/changelog/",
            "text": "CMV Releases\n\n\nVersion 1.3.4\n (July 21, 2015)\n\n\nVersion 1.3.3\n (February 10, 2015)\n\n\nVersion 1.3.2\n (December 2, 2014)\n\n\nVersion 1.3.1\n (October 31, 2014)\n\n\nVersion 1.3.0\n (September 22, 2014)\n\n\nVersion 1.2.0\n (August 20, 2014)\n\n\nVersion 1.1.2\n (July 18, 2014)\n\n\nVersion 1.1.1\n (July 14, 2014)\n\n\nVersion 1.1.0\n (July 3, 2014)\n\n\nVersion 1.0.1\n (May 6, 2014)\n\n\nVersion 1.0.0\n (April 25, 2014)",
            "title": "Change Log"
        },
        {
            "location": "/about/changelog/#cmv-releases",
            "text": "",
            "title": "CMV Releases"
        },
        {
            "location": "/about/changelog/#version-134-july-21-2015",
            "text": "",
            "title": "Version 1.3.4 (July 21, 2015)"
        },
        {
            "location": "/about/changelog/#version-133-february-10-2015",
            "text": "",
            "title": "Version 1.3.3 (February 10, 2015)"
        },
        {
            "location": "/about/changelog/#version-132-december-2-2014",
            "text": "",
            "title": "Version 1.3.2 (December 2, 2014)"
        },
        {
            "location": "/about/changelog/#version-131-october-31-2014",
            "text": "",
            "title": "Version 1.3.1 (October 31, 2014)"
        },
        {
            "location": "/about/changelog/#version-130-september-22-2014",
            "text": "",
            "title": "Version 1.3.0 (September 22, 2014)"
        },
        {
            "location": "/about/changelog/#version-120-august-20-2014",
            "text": "",
            "title": "Version 1.2.0 (August 20, 2014)"
        },
        {
            "location": "/about/changelog/#version-112-july-18-2014",
            "text": "",
            "title": "Version 1.1.2 (July 18, 2014)"
        },
        {
            "location": "/about/changelog/#version-111-july-14-2014",
            "text": "",
            "title": "Version 1.1.1 (July 14, 2014)"
        },
        {
            "location": "/about/changelog/#version-110-july-3-2014",
            "text": "",
            "title": "Version 1.1.0 (July 3, 2014)"
        },
        {
            "location": "/about/changelog/#version-101-may-6-2014",
            "text": "",
            "title": "Version 1.0.1 (May 6, 2014)"
        },
        {
            "location": "/about/changelog/#version-100-april-25-2014",
            "text": "",
            "title": "Version 1.0.0 (April 25, 2014)"
        },
        {
            "location": "/about/team/",
            "text": "The Core CMV Team\n\n\nCome visit us on GitHub.\n\n\nThe CMV Organization\n\n\nBen Fousek\n\n\nDavid Spriggs\n\n\nJade Freeman\n\n\nTim McGee\n\n\nGregg Roemhildt",
            "title": "The CMV Team"
        },
        {
            "location": "/about/team/#the-core-cmv-team",
            "text": "Come visit us on GitHub.",
            "title": "The Core CMV Team"
        },
        {
            "location": "/about/team/#the-cmv-organization",
            "text": "",
            "title": "The CMV Organization"
        },
        {
            "location": "/about/team/#ben-fousek",
            "text": "",
            "title": "Ben Fousek"
        },
        {
            "location": "/about/team/#david-spriggs",
            "text": "",
            "title": "David Spriggs"
        },
        {
            "location": "/about/team/#jade-freeman",
            "text": "",
            "title": "Jade Freeman"
        },
        {
            "location": "/about/team/#tim-mcgee",
            "text": "",
            "title": "Tim McGee"
        },
        {
            "location": "/about/team/#gregg-roemhildt",
            "text": "",
            "title": "Gregg Roemhildt"
        }
    ]
}